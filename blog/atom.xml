<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom">

  <title>Yeoman Blog</title>
  <link href="https://yowebapp.github.io/blog/atom.xml" rel="self"/>
  <link href="https://yowebapp.github.io"/>
  <updated>2016-09-09T22:26:10+08:00</updated>
  <id>https://yowebapp.github.io/</id>
  <author>
    <name>Tsrot</name>
  </author>

  
  <entry>
    <title>Generator-M-Ionic - JS fatigue and transitioning to Typescript, Angular 2 &amp; Ionic 2</title>
    <link href="https://yowebapp.github.io/blog/generator-m-ionic-js-fatigue-and-transitioning-to-typescript-angular-2-and-ionic-2.html"/>
    <updated>2016-07-13T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/generator-m-ionic-js-fatigue-and-transitioning-to-typescript-angular-2-and-ionic-2</id>
    <content type="html">&lt;p align=center>&lt;a href=https://github.com/mwaylabs/generator-m-ionic alt=Generator-M-Ionic>&lt;img width=175 src=/static/logo.bd3dcbc26e.png>&lt;/a>&lt;/p>&lt;blockquote>&lt;p>This is a guest post by &lt;a href=https://twitter.com/JonathanGrupp>Jonathan Grupp&lt;/a>&lt;/p>&lt;/blockquote>&lt;p>&lt;a href=https://github.com/mwaylabs/generator-m-ionic>Generator-M-Ionic&lt;/a> is an open source collection of advanced workflows for building cross-platform HTML5 mobile apps with Ionic. This article gives a quick introduction into the generator's capabilities and refers to more elaborate resources for those willing to work with it.&lt;/p>&lt;p>As we're transitioning to the next generation technology stack with Typescript, Angular 2 and Ionic 2, we're trying to overcome &lt;a href=https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.vh3bssyd7>JS fatigue&lt;/a> and JS tooling fatigue and bring the development of the different tools closer together. You can help us by joining the discussion!&lt;/p>&lt;h2>What's Generator-M-Ionic for?&lt;/h2>&lt;blockquote>&lt;p>&lt;strong>Advanced workflows for building rock-solid Ionic apps:&lt;/strong> develop, prototype, test, build and deliver high quality apps with Yeoman, Gulp, Bower, Angular, Cordova and of course Ionic. All in one sexy generator.&lt;/p>&lt;/blockquote>&lt;p>The roots of &lt;a href=https://github.com/mwaylabs/generator-m-ionic>Generator-M-Ionic&lt;/a> reach back more than two years when my team and I (&lt;a href=https://github.com/gruppjo>@gruppjo&lt;/a>) at &lt;a href=http://www.mwaysolutions.com/ >M-Way Solutions&lt;/a> decided to move our HTML5 mobile app development stack to Angular and Ionic in &lt;a href=http://blog.mwaysolutions.com/2015/03/26/generator-m-the-state-of-html5-mobile-app-development-at-m-way/ >early 2014&lt;/a>. Since then &lt;a href=https://github.com/mwaylabs/generator-m-ionic>Generator-M-Ionic&lt;/a> has grown into a full-fledged collection of development tools for building large-scale enterprise apps with &lt;a href=http://cordova.apache.org/ >Cordova&lt;/a>, &lt;a href=https://angularjs.org/ >Angular&lt;/a> and &lt;a href=http://ionicframework.com/ >Ionic&lt;/a>.&lt;/p>&lt;p>Built on top of the &lt;a href=http://yeoman.io/ >Yeoman Ecosystem&lt;/a> with &lt;a href=http://gulpjs.com/ >Gulp&lt;/a>, &lt;a href=https://bower.io/ >Bower&lt;/a> and &lt;a href=https://www.npmjs.com/ >npm&lt;/a>, Generator-M-Ionic offers highly efficient workflows for building apps from start to finish by wiring together a complex technology stack and by providing workflows for all important aspects of professional cross-platform HTML5 app development with Cordova, Angular and Ionic.&lt;/p>&lt;p>&lt;img src=/static/tech_stack.c7ead8d7d6.png alt="Generator-M-Ionic technology stack">&lt;/p>&lt;p>Here's a brief overview of Generator-M-Ionic's capabilities:&lt;/p>&lt;h3>Code Generation&lt;/h3>&lt;ul>&lt;li>&lt;code>yo m-ionic&lt;/code> sets up a fine-tuned project including:&lt;ul> &lt;li>worry-free &lt;a href=https://github.com/mwaylabs/generator-m-ionic/tree/master/docs/guides/git_integration.md>Git integration&lt;/a>&lt;/li> &lt;li>a properly configured &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/development_intro.md#using-the-cordova-cli>Cordova project&lt;/a>&lt;/li> &lt;li>an out of the box &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/questions.md#starter-template>sample app&lt;/a>&lt;/li> &lt;li>seamless &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/sass_integration.md>Sass integration&lt;/a>&lt;/li> &lt;li>easy to understand &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/file_structure.md>file-structure&lt;/a>&lt;/li>&lt;/ul>&lt;/li>&lt;li>&lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/sub_generators.md>sub generators&lt;/a> create ready to use components like Angular controllers, templates, services and more&lt;/li>&lt;/ul>&lt;h3>Development Workflows&lt;/h3>&lt;ul>&lt;li>&lt;code>gulp watch&lt;/code> automatically connects the frontend-stack including Angular, Ionic and all other bower components, stylesheets, your own Angular and Ionic components with your app and watches for changes&lt;/li> &lt;li>&lt;code>gulp --livereload "run ios"&lt;/code> builds an app for your device and watches for changes on your dev machine using &lt;a href=https://www.browsersync.io/ >Browsersync&lt;/a>&lt;/li> &lt;li>... discover more useful workflows in our &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/development_intro.md>Development Introduction&lt;/a>&lt;/li>&lt;/ul>&lt;h3>Code Quality&lt;/h3>&lt;ul>&lt;li>&lt;a href=http://eslint.org/ >ESLint&lt;/a> together with other JSONLint runs along with all important development tasks&lt;/li> &lt;li>&lt;code>gulp karma&lt;/code> and &lt;code>gulp protractor&lt;/code> profit from an out-of-the-box ready-to-use &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/testing.md>Testing workflow&lt;/a>&lt;/li> &lt;li>these integrate nicely into Continuous Integration, precommit and other hooks with &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/testing_workflow.md>Husky&lt;/a>&lt;/li>&lt;/ul>&lt;h3>Continuous Integration&lt;/h3>&lt;p>In addition to our CI-ready build and test workflows, injecting &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/build_vars.md>Build Vars&lt;/a> into your build and other &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/programmatically_change_configxml.md>CI features&lt;/a> complement a successful Continuous Integration setup with Generator-M-Ionic.&lt;/p>&lt;h3>Advanced Workflows&lt;/h3>&lt;p>Handling &lt;a href=https://github.com/mwaylabs/generator-m-ionic/tree/master/docs/guides/cors_proxy.md>CORS &amp;amp; Proxying&lt;/a> issues, managing different sets of &lt;a href=https://github.com/mwaylabs/generator-m-ionic/tree/master/docs/guides/icons_splash_screens.md>App Icons and splash screens&lt;/a>, tackling different API endpoints and other things with &lt;a href=https://github.com/mwaylabs/generator-m-ionic/tree/master/docs/guides/environments.md>Environments&lt;/a> and much more is part of the &lt;a href=https://github.com/mwaylabs/generator-m-ionic#advanced>Advanced Workflows Section&lt;/a> of our Guides.&lt;/p>&lt;h3>Ecosystems&lt;/h3>&lt;p>Creating things like backends, push services, user management, build infrastructures and others can be hard. Luckily there's ecosystems like the &lt;a href=http://ionic.io/ >Ionic Platform&lt;/a>, our own enterprise-targeting &lt;a href=https://www.relution.io/ >Relution&lt;/a>, which your Generator-M-Ionic project integrates into nicely. &lt;a href=https://github.com/mwaylabs/generator-m-ionic#ecosystems>Read more&lt;/a>.&lt;/p>&lt;h2>If that wasn't enough&lt;/h2>&lt;p>... check out our &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/programmatically_change_configxml.md>GitHub repository&lt;/a> for the full documentation!&lt;/p>&lt;p>Besides that, we recently had the pleasure of publishing a full blog series about Generator-M-Ionic on the &lt;a href=http://blog.ionic.io/ >Ionic Blog&lt;/a>. Give it a go for a more tutorial-like approach of getting to know the full value of Generator-M-Ionic:&lt;/p>&lt;ul>&lt;li>Advanced workflows for building rock-solid Ionic apps. &lt;a href=http://blog.ionic.io/advanced-workflows-for-building-rock-solid-ionic-apps-part-1/ >Part 1: Playground&lt;/a>&lt;/li> &lt;li>Advanced workflows for building rock-solid Ionic apps. &lt;a href=http://blog.ionic.io/advanced-workflows-for-building-rock-solid-ionic-apps-part-2/ >Part 2: Mountain&lt;/a>&lt;/li> &lt;li>Advanced workflows for building rock-solid Ionic apps. &lt;a href=http://blog.ionic.io/advanced-workflows-for-building-rock-solid-ionic-apps-part-3/ >Part 3: Orbit&lt;/a>&lt;/li>&lt;/ul>&lt;p>We'd love to hear your feedback!&lt;/p>&lt;h2>Transitioning&lt;/h2>&lt;p>With Angular 2 &lt;a href="http://angularjs.blogspot.de/2016/06/rc4-now-available.html?view=magazine">release candidates&lt;/a> and Ionic 2 &lt;a href=http://blog.ionic.io/ionic-2-beta-10-is-live/ >betas&lt;/a> now being released almost every week &lt;a href=http://blog.mwaysolutions.com/2016/03/23/preparing-for-ionic-2-and-angular-2/ >we're preparing to make our transition&lt;/a> in a reasonable and educated fashion.&lt;/p>&lt;p>&lt;img src=/static/angular2_ionic2.d3d9a54599.png alt="Angular 2 Ionic 2">&lt;/p>&lt;p>The Angular 1 &amp;amp; Ionic 1 ecosystem is huge and many companies like ourselves, or organizations who use our generator have a large number of apps and assets written for this stack. Therefore the Angular 1 / Ionic 1 stack will continue to play a major role for a long time to come, before the majority of the market will have made its transition.&lt;/p>&lt;p>Thus it's especially important for us to provide tools that capitalize on these assets and apps instead of rendering them useless. A smooth transition instead of mindlessly rushing towards the new stack.&lt;/p>&lt;p>For this we need your help.&lt;/p>&lt;h2>Spark the discussion&lt;/h2>&lt;p>If you like what you're seeing in our generator you can help us figure out how all of us can build Ionic 2 apps in the future. There's many open ends and a lot of commotion regarding the whole Angular 2 / Ionic 2 stack. Whether to Browserify or to Webpack, to ES6/7 or to Typescript and whether to CLI or to Yeoman?&lt;/p>&lt;p>There's a lot of choices contributing to &lt;a href=https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.vh3bssyd7>JS fatigue&lt;/a> and from a tooling standpoint this isn't any different.&lt;/p>&lt;p>There is an &lt;a href=https://github.com/angular/angular-cli>Angular 2 CLI prototype&lt;/a> from the Angular creators and the &lt;a href=http://ionicframework.com/docs/v2/cli/ >Ionic 2 CLI&lt;/a> from the Ionic creators. Unfortunately both of them are more or less closed systems which drastically complicates building on top of it to suit your own needs. As of now it's time consuming, partly impossible to get Ionic, Cordova, a proper e2e and unit &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/testing.md>testing workflow&lt;/a>, &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/eslint.md>linting&lt;/a>, &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/environments.md>environments&lt;/a>, &lt;a href=https://github.com/mwaylabs/generator-m-ionic/blob/master/docs/guides/build_vars.md>build vars&lt;/a> and many of our other features into each of these tools without forking and largely altering them.&lt;/p>&lt;p>Personally I'm quite intrigued by the flexibility of the &lt;a href=http://fountainjs.io/ >FountainJS Generators&lt;/a>, which is the next generation of the famous &lt;a href=https://github.com/Swiip/generator-gulp-angular>generator-gulp-angular&lt;/a>, both created by &lt;a href=https://twitter.com/Zckrs>@zckrs&lt;/a> and &lt;a href=https://twitter.com/Swiip>@Swiip&lt;/a>. I hope we can build on top of their architecture. Relying on the &lt;a href=http://yeoman.io/ >Yeoman&lt;/a> architecture allows tremendous flexibility and extensibility in their and our project. Unfortunately the Angular 2 CLI and the Ionic 2 CLI don't use Yeoman and don't provide easy ways to build on top of their functionality. In fact that's exactly the same problem we had with Angular 1 and Ionic 1 and is the reason &lt;a href=http://blog.mwaysolutions.com/2015/09/21/generator-m-ionic-and-the-search-for-the-holy-grail/ >why we started building our generator in the first place&lt;/a>.&lt;/p>&lt;h2>Get in touch&lt;/h2>&lt;p>You can help by joining the discussion, tell us which features of Generator-M-Ionic, the Angular 2 CLI and the Ionic 2 CLI you like and hopefully we can bring development of all of them closer together, getting rid of some of that decision fatigue and bring better tools for all of us.&lt;/p>&lt;p>You can start by commenting on &lt;a href=https://github.com/mwaylabs/generator-m-ionic/issues/403>this issue in our repository&lt;/a>, or dive deeper into to the corresponding discussion over at the &lt;a href=https://github.com/yeoman/yeoman/issues/1571>yeoman repo&lt;/a>, &lt;a href=https://github.com/angular/angular-cli/issues/49#issuecomment-196876545>angular-cli repo&lt;/a> or &lt;a href=https://github.com/driftyco/ionic-cli/issues/845>ionic-cli repo&lt;/a>.&lt;/p>&lt;p>Let us know what you think and help us build better tools for the next generation of HTML5 mobile app development!&lt;/p>&lt;p>For everything else our &lt;a href=https://github.com/mwaylabs/generator-m-ionic>Github repository&lt;/a> and &lt;a href=https://gitter.im/mwaylabs/generator-m-ionic>Gitter channel&lt;/a> is the way to go!&lt;/p></content>
  </entry>
  
  <entry>
    <title>generator-gulp-angular 1.0.0 stable released</title>
    <link href="https://yowebapp.github.io/blog/generator-gulp-angular-v1.html"/>
    <updated>2015-10-15T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/generator-gulp-angular-v1</id>
    <content type="html">&lt;blockquote>&lt;p>This is a guest post by &lt;a href=https://github.com/Swiip>Matthieu Lux&lt;/a> and &lt;a href=https://github.com/zckrs>Mehdy Dara&lt;/a>.&lt;/p>&lt;/blockquote>&lt;h2>Intro &lt;img src=/static/generator-gulp-angular-logo.a6d9572773.png alt=Logo>&lt;/h2>&lt;p>It has now been more than a year since we (&lt;a href=https://twitter.com/Swiip>@Swiip&lt;/a> and &lt;a href=https://twitter.com/Zckrs>@zckrs&lt;/a>), started work on our Yeoman generator. Today we are celebrating the release of our first major and stable version: &lt;a href=https://www.npmjs.com/package/generator-gulp-angular>generator-gulp-angular 1.0.0&lt;/a>.&lt;/p>&lt;p>At first, we wanted to make a good merge of &lt;a href=https://github.com/yeoman/generator-gulp-webapp>generator-gulp-webapp&lt;/a> and &lt;a href=https://github.com/yeoman/generator-angular>generator-angular&lt;/a>, as we worked on Angular but grew tired of Grunt's verbosity. Then, the project popularity started to increase and so did its ambition.&lt;/p>&lt;h2>Philosophy&lt;/h2>&lt;p>We followed all the precepts of Yeoman and added our own:&lt;/p>&lt;ul>&lt;li>Provide a well written seed project, following the best recommendations for folder structure and code style.&lt;/li> &lt;li>Offer options to enable the user to start with the best tooling and optimizations using the latest technologies.&lt;/li> &lt;li>Use automatic injection in different parts of the project: script tags both vendor and sources in the index.html, styles files, vendor, css or preprocessed.&lt;/li> &lt;li>Provide test coverage, as perfect as possible, for both the generator and also code it generated.&lt;/li>&lt;/ul>&lt;h3>Technologies supported&lt;/h3>&lt;p>We are not joking around when we talk about this being a stable version. We integrated lots of technologies and languages, from CoffeeScript to TypeScript, to Sass to Stylus. The number of combinations exceeds several million! We wrote tests, documentation and fixed issues for 12 minor versions and 2 release candidates, to be able to deliver a perfectly configured seed project, no matter the options you choose.&lt;/p>&lt;p>&lt;img src=/static/technologies-gga.e534cdd81e.png alt="">&lt;/p>&lt;h3>Optimization served&lt;/h3>&lt;p>We integrated many optimizations for your web application using a few Gulp plugins:&lt;/p>&lt;ul>&lt;li>&lt;strong>&lt;a href=http://www.browsersync.io/docs/gulp/ >browserSync&lt;/a>&lt;/strong>: full-featured development web server with livereload and device sync&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/Kagami/gulp-ng-annotate>ngAnnotate&lt;/a>&lt;/strong>: convert simple injection to complete syntax to be minification proof&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/miickel/gulp-angular-templatecache>angular-templatecache&lt;/a>&lt;/strong>: all HTML partials will be converted to JS to be bundled in the application&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/adametry/gulp-eslint>ESLint&lt;/a>&lt;/strong>: the pluggable linting utility for JavaScript&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb>watch&lt;/a>&lt;/strong>: watch your source files and recompile them automatically&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/jonkemp/gulp-useref>useref&lt;/a>&lt;/strong>: allow configuration of your files in comments of your HTML file&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/terinjokes/gulp-uglify>uglify&lt;/a>&lt;/strong>: optimize all your JavaScript&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/murphydanger/gulp-minify-css>clean-css&lt;/a>&lt;/strong>: optimize all your CSS&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/sindresorhus/gulp-rev>rev&lt;/a>&lt;/strong>: add a hash in the file names to prevent browser cache problems&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/karma-runner/gulp-karma#tldr>karma&lt;/a>&lt;/strong>: out of the box unit test configuration with karma&lt;/li> &lt;li>&lt;strong>&lt;a href=https://github.com/mllrsohn/gulp-protractor>protractor&lt;/a>&lt;/strong>: out of the box e2e test configuration with protractor&lt;/li>&lt;/ul>&lt;h2>2.0.0 on the road...&lt;/h2>&lt;p>But version 1.0.0 is not the end of the road. While maintaining the v1 branch, we started a new Github organization called &lt;a href=https://github.com/FountainJS>FountainJS&lt;/a> targeting a futuristic v2 version. As the context of the build tools has greatly evolved over a year, it’ll be a reboot of the code base. The major selling point will be to use Yeoman Generator's composition support, to upgrade to Gulp 4 and to write it in ES6. Finally, we hope to open new horizons in terms of options: dependency management for sure, but why not also Web frameworks (someone talked about React?) and also a backend.&lt;/p>&lt;p>Go try out the &lt;a href=https://www.npmjs.com/package/generator-gulp-angular>generator-gulp-angular&lt;/a> v1.0.0 release! Any feedback, issues, or contributions on the new &lt;a href=https://github.com/FountainJS>FountainJS&lt;/a> project will always be appreciated.&lt;/p></content>
  </entry>
  
  <entry>
    <title>State of the Moustache</title>
    <link href="https://yowebapp.github.io/blog/state-of-the-moustache-2015.html"/>
    <updated>2015-04-27T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/state-of-the-moustache-2015</id>
    <content type="html">&lt;blockquote>&lt;p>This is a post by team member &lt;a href=https://github.com/addyosmani>Addy Osmani&lt;/a>. &lt;br>In this issue we cover generators for React, ES6, desktop apps and more.&lt;/p>&lt;/blockquote>&lt;h2>Intro&lt;/h2>&lt;p>Allo! Allo! April is a special month for us as it represents 3 years since the project first started and almost 2 years since we decided to rename the binary from &lt;a href=http://github.com/yeoman/yeoman>yeoman&lt;/a> to &lt;a href=http://github.com/yeoman/yo>yo&lt;/a>. This month also saw Yeoman grow to &lt;a href=http://www.npm-stats.com/%7Epackages/yo>1.3 million&lt;/a> total installs and 1635 community &lt;a href=http://yeoman.io/generators/ >generators&lt;/a>.&lt;/p>&lt;p>A huge thank you to all our contributors and a special call-out to all the global event organisers that featured Yeoman at their events. &lt;a href=https://twitter.com/YeomanTO>YeomanTO&lt;/a>, the &lt;a href=https://twitter.com/Smartass_io/status/580501962527010816>Codepen Meetups&lt;/a>, &lt;a href=https://twitter.com/kevinSuttle/status/568811512938127361>IBM Design Camp&lt;/a>, &lt;a href=https://twitter.com/solanojuan/status/575807587095990272>OttawaJS&lt;/a>, &lt;a href=https://twitter.com/jsmontreal>JSMontreal&lt;/a> and others all have our ❤. We couldn't be doing this without you.&lt;/p>&lt;h2>Highlights&lt;/h2>&lt;p>Some of our recent highlights have been increased use of Yeoman for scaffolding in the React community, folks trying out ES6 to write their own &lt;a href=http://mammal.io/articles/yeoman-generators-es6>generators&lt;/a> and Internet Explorer PM Ade Bateman using yo to scaffold out &lt;a href=http://adrianba.net/archive/2015/03/14/using-yeoman-to-start-writing-technical-specifications-with-respec.aspx>technical specifications&lt;/a>. Crazy cool.&lt;/p>&lt;p>&lt;img src=/static/april-es6.768aa761fc.png alt="">&lt;/p>&lt;p>We're excited to see so much passion for project scaffolding and are working on some new features to enable generators to extend and build on top of each other.&lt;/p>&lt;h3>Spotlight: React&lt;/h3>&lt;p>&lt;a href=http://reactjs.com>React&lt;/a> is a library for creating user-interfaces by Facebook. It creates its own Virtual DOM, where components live. This approach provides the potential for performance gains as React calculates what work needs to be done in the DOM beforehand, updating the DOM tree in a batch accordingly. React avoids costly DOM operations and aims to update in an efficient way.&lt;/p>&lt;p>Three new generators for quickly getting started with React are out: &lt;a href=https://github.com/newtriks/generator-react-webpack>React and WebPack&lt;/a> (recommended, with support for Flux and react-router), &lt;a href=https://github.com/banderson/generator-flux-react>React and Flux&lt;/a> (with Browserify), and &lt;a href=https://github.com/payner35/generator-meteor-react>React and Meteor&lt;/a>.&lt;/p>&lt;p>&lt;img src=/static/april-react.8cd75e7f6d.png alt="">&lt;/p>&lt;h3>Spotlight: ES6&lt;/h3>&lt;p>A number of new generators are also now available for quickly turning your ES6+ code into ES5 code. There are generators available for &lt;a href=https://github.com/thejameskyle/generator-es6-library-boilerplate>Babel&lt;/a>, &lt;a href=https://github.com/swirlycheetah/generator-angular2>Angular2&lt;/a> and &lt;a href=https://github.com/zewa666/generator-aurelia>Aurelia&lt;/a> - a new framework using ES6 and Web Components. A few more ES6 generators can be found over on my &lt;a href=https://github.com/addyosmani/es6-tools#code-generation>es6-tools&lt;/a> project.&lt;/p>&lt;p>&lt;img src=/static/april-es62.999f514308.png alt="">&lt;/p>&lt;h3>Spotlight: Electron&lt;/h3>&lt;p>&lt;a href=http://electron.atom.io/ >Electron&lt;/a>, formerly atom-shell, allows you to build cross-platform desktop apps using JS/CSS/HTML. Some of the apps built using it that you may already be using include &lt;a href=https://slack.com/ >Slack&lt;/a>, &lt;a href=https://atom.io>Atom Editor&lt;/a> (of course) and Photoshop/Sketch export tool &lt;a href=http://avocode.com/ >Avocode&lt;/a>.&lt;/p>&lt;p>Electron is based on &lt;a href=http://iojs.org/ >io.js&lt;/a> and Chromium and to help you get started with projects using it, Sindre Sorhus has written a quick Electron &lt;a href=https://github.com/sindresorhus/generator-electron>generator&lt;/a> you can try out. He also maintains a list of &lt;a href=https://github.com/sindresorhus/awesome-electron>awesome-electron&lt;/a> projects in case you're looking for inspiration.&lt;/p>&lt;p>&lt;img src=/static/april-electron.2bfc6d8b8a.png alt="">&lt;/p>&lt;h3>Spotlight: Node&lt;/h3>&lt;p>While many of us are used to just using &lt;code>npm init&lt;/code> for fleshing out our new Node modules, some might prefer a more opinionated alternative. Cue &lt;a href=https://github.com/sindresorhus/node-module-boilerplate>node-module-boilerplate&lt;/a> and &lt;a href=https://github.com/sindresorhus/generator-nm>generator-nm&lt;/a> by Sindre Sorhus. His starting point includes EditorConfig, Travis and a unit testing starting point out of the box.&lt;/p>&lt;p>On a related note, if you find yourself needing to automate debugging a Yeoman generator with node-inspector, Hemanth on the team has written up a useful &lt;a href=https://github.com/hemanth/debug-yeoman-generator>script&lt;/a> you can also check out.&lt;/p>&lt;h2>Community&lt;/h2>&lt;p>Below is a round-up of community authored articles about or mentioning Yeoman which we enjoyed reading this month. Learn how to build a complete WebRTC client, a Slack bot or automate your Wordpress theme tooling workflow. This and more below.&lt;/p>&lt;h3>Articles&lt;/h3>&lt;p>&lt;a href=http://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman>Multi-User Video Conference with WebRTC and Yeoman&lt;/a>&lt;/p>&lt;p>&lt;a href=http://mammal.io/articles/yeoman-generators-es6>Writing Yeoman generators in ES6&lt;/a>&lt;/p>&lt;p>&lt;a href=http://blog.pandorabots.com/putting-your-bot-on-slack/ >Putting your bot on #Slack using Yeoman&lt;/a>&lt;/p>&lt;p>&lt;a href=https://stormpath.com/blog/angular-node-15-minutes>How to Build an App With AngularJS, Node.js and Stormpath in 15 Minutes&lt;/a>&lt;/p>&lt;p>&lt;a href=https://speakerdeck.com/artificermil/front-end-workflow-automation-for-wordpress-theme-and-plugin-development>Worflow automation for Wordpress Theme Developers with Yeoman&lt;/a>&lt;/p>&lt;p>&lt;a href=http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015>A Baseline for Front-End [JS] Developers: 2015&lt;/a>&lt;/p>&lt;p>&lt;a href=http://robdodson.me/yeoman-polymer-and-gulp>Yeoman, Polymer and Gulp&lt;/a>&lt;/p>&lt;p>&lt;a href=http://yeoman.io/authoring/integrating-yeoman.html>Integrating Yeoman with third-party tools&lt;/a>&lt;/p>&lt;p>&lt;a href=https://asciinema.org/a/13240>Using &lt;code>yo webapp&lt;/code> via Docker&lt;/a>&lt;/p>&lt;p>&lt;a href=http://itmustbe.com/code/2015/04/04/node-yeoman-bower-gulp-postcss-os-x-yosemite/ >Node, Yeoman, Bower, and Gulp with PostCSS on OS X Yosemite&lt;/a>&lt;/p>&lt;p>&lt;a href="https://youtube.com/watch?list=PLpP9FLMkNf54AFwvRgYb8KMbKCaqqopsl&amp;amp;v=bqTLJi086Po">Yeoman Tutorial video series&lt;/a>&lt;/p>&lt;p>&lt;a href=https://scotch.io/tutorials/internationalization-of-angularjs-applications>Internationalization of AngularJS Applications&lt;/a>&lt;/p>&lt;p>&lt;a href=http://www.drissamri.be/blog/technology/starting-modern-java-project-with-jhipster/ >Starting modern Java projects with JHipster and Yeoman&lt;/a>&lt;/p>&lt;p>&lt;a href=http://khmylov.com/blog/2015/02/build-web-app-and-survive/ >How to set up a modern web app and stay sane&lt;/a>&lt;/p>&lt;p>&lt;a href="http://angularonrails.com/how-to-wire-up-ruby-on-rails-and-angularjs-as-a-single-page-application-gulp-version/?utm_medium=email&amp;amp;utm_source=rubyweekly">How to Wire Up Ruby on Rails and AngularJS as a Single-Page Application (Gulp Version)&lt;/a>&lt;/p>&lt;p>&lt;a href="https://airpair.com/typescript/posts/typescript-development-with-gulp-and-sublime-text?utm_medium=email&amp;amp;utm_source=javascriptweekly">Practical TypeScript Development with Gulp and Sublime Text 3&lt;/a>&lt;/p>&lt;h3>Some generators we liked&lt;/h3>&lt;p>&lt;a href=http://axiacore.github.io/generator-django-axiacore/ >A new generator for Django projects&lt;/a>&lt;/p>&lt;p>&lt;a href=https://github.com/ragingwind/mobile-chrome-apps-starter-kit>Mobile Chrome Apps Starter Kit with Polymer&lt;/a>&lt;/p>&lt;p>&lt;a href=https://github.com/Swiip/generator-gulp-angular/releases>Angular + Gulp generator has a new release&lt;/a>&lt;/p>&lt;p>&lt;a href=https://github.com/bezoerb/generator-grunt-symfony>Symphony2 with JSPM and critical-CSS optimisation&lt;/a>&lt;/p>&lt;p>&lt;a href=https://github.com/sixertoy/generator-brackextension>Generator for Adobe Brackets extensions&lt;/a>&lt;/p>&lt;h2>Announcements from core&lt;/h2>&lt;h3>Exploring npm3&lt;/h3>&lt;p>&lt;a href=https://github.com/npm/npm/wiki/Roadmap>npm@3&lt;/a> plans to introduce a number of improvements, including a caching rewrite and no longer installing &lt;code>peerDependencies&lt;/code> by default. This particular change will have an impact on &lt;code>yo&lt;/code> as it means you end up needing to resolve peerDep conflicts yourself manually. We may end up having our sub-generators in &lt;code>dependencies&lt;/code> instead, but look forward to taking full advantage of npm@3 where it'll benefit our users.&lt;/p>&lt;h3>Deprecations&lt;/h3>&lt;p>As Simon mentioned in our &lt;a href=https://github.com/yeoman/generator/releases/tag/v0.19.0>0.19 release notes&lt;/a> for the generator system, we're currently looking to deprecate a set of methods as we work on cleaning up our API towards an eventual 1.0 release. As always, please test your generators against the latest version of &lt;code>yeoman-generator&lt;/code> to ensure everything continues to run smoothly.&lt;/p>&lt;h3>Composition FTW&lt;/h3>&lt;p>It's been pleasant to see an &lt;a href=https://twitter.com/tomwayson/status/588564830665084930>increasing&lt;/a> number of developers using our &lt;a href=http://yeoman.io/authoring/composability.html>composability&lt;/a> feature for their generators. This enables building upon common ground so that a generator can be run inside another generator, rather than having to replicate functionality. E.g call out to a generator for scaffolding Karma tests rather than doing this inside your AngularApp one.&lt;/p>&lt;h2>Tipping our hat&lt;/h2>&lt;p>That's about it for this round-up. We would like to remind folks that we're always checking out &lt;a href=http://twitter.com/yeoman>@yeoman&lt;/a> and enjoy hearing suggestions for anything we can be doing better, news, new generators you've written or even just &lt;a href=https://twitter.com/kittytail38/status/573522972528373761>doodles&lt;/a> of your favorite man in a hat. If you have ideas for the next post, you can also drop 'em in this &lt;a href=https://github.com/yeoman/yeoman/issues/1411>thread&lt;/a>.&lt;/p>&lt;p>Until next time, &lt;code>yo awesomeness&lt;/code>.&lt;/p></content>
  </entry>
  
  <entry>
    <title>Why Bower_Components was moved to a Project's Root Directory</title>
    <link href="https://yowebapp.github.io/blog/bower_components-in-project-root.html"/>
    <updated>2014-12-01T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/bower_components-in-project-root</id>
    <content type="html">&lt;blockquote>&lt;p>this is a post by team member &lt;a href=https://github.com/eddiemonge>Eddie Monge Jr&lt;/a>&lt;/p>&lt;/blockquote>&lt;p>&lt;strong>tl;dr&lt;/strong> Because I said so. lol j/k. &lt;code>/app&lt;/code> should be for your files, not third party libraries.&lt;/p>&lt;p>There has been a few questions and discussions regarding the decision to move the &lt;strong>bower_components&lt;/strong> folder outside of the &lt;code>/app&lt;/code> folder.&lt;/p>&lt;p>Matija (&lt;a href=https://github.com/silvenon>silvenon&lt;/a>) summarized some of the thoughts nicely:&lt;/p>&lt;ol>&lt;li>I want the &lt;code>/app&lt;/code> folder to be for user-generated stuff&lt;/li> &lt;li>As external dependencies, I feel they are better located externally. Next to node_modules&lt;/li> &lt;li>It's hard to run any command in the terminal which goes through all files, (like tree), because you always have to ignore bower_components&lt;/li>&lt;/ol>&lt;p>Here are those reasons point by point with some explanations.&lt;/p>&lt;h2>User Generated Files&lt;/h2>&lt;blockquote>&lt;p>I want the &lt;code>/app&lt;/code> folder to be for user-generated stuff&lt;/p>&lt;/blockquote>&lt;p>There are people who edit files in the &lt;code>/app&lt;/code> folder then wonder why their changes disappear when they do a &lt;code>bower update/install&lt;/code>. Not just beginners but also people who should know better. They think "oh its in the &lt;code>/app&lt;/code> folder so I can freely edit it without worrying about it". That was the main expectation this change wanted to make true.&lt;/p>&lt;h2>External Dependencies&lt;/h2>&lt;blockquote>&lt;p>As external dependencies, I feel they are better located externally. Next to node_modules&lt;/p>&lt;/blockquote>&lt;p>This was the single biggest reason for this change. &lt;code>/app&lt;/code> should be for the &lt;em>user&lt;/em> web app/site files, emphasis on &lt;strong>user&lt;/strong>. It shouldn't be for external or third-party files. It is the responsibility of the tool authors to make having the files located elsewhere completely painless (and even transparent) to end users. Make the tools deal with the complexity, and give the users an easy workflow.&lt;/p>&lt;p>There is already a paradigm of this existing in Ruby on Rails. Not saying RoR is a good example to follow, but it is popular enough to say its what the community expects to see. It has also been in the &lt;a href=https://github.com/yeoman/generator-angular>Angular generator&lt;/a> for awhile now and there haven't been problems or complaints about it for a long time. Some people try to PR (pull request) moving it into the &lt;code>/app&lt;/code> folder because they think it is supposed to be there but when pointed out how it works, they generally seem to be happy with the change.&lt;/p>&lt;h2>Tooling&lt;/h2>&lt;blockquote>&lt;p>It's hard to run any command in the terminal which goes through all files, (like tree), because you always have to ignore bower_components&lt;/p>&lt;/blockquote>&lt;p>It is easier to do a global search in the &lt;code>/app&lt;/code> folder when it isn't cluttered with external libraries. Although a counter to that is:&lt;/p>&lt;blockquote>&lt;p>If your command line tools give you data you don't need I'd say you should use them properly - &lt;a href=https://github.com/Munter>Peter Müller&lt;/a>&lt;/p>&lt;/blockquote>&lt;p>Which is a valid point. It is easy enough to set up a filter to exclude those files. But this kind of goes with the point that tools should get out of the way of the user. Bower is another tool and having it put its files in the users files is not getting out of the way, it's adding complexity.&lt;/p>&lt;h2>Downsides&lt;/h2>&lt;p>Nothing is perfect (well almost nothing) so some downsides should be mentioned.&lt;/p>&lt;ol>&lt;li>Requires a build/serve system to work (like the one generated by the official Yeoman generators).&lt;/li>&lt;/ol>&lt;p>Counter argument: if Sass/Coffee/Autoprefixer/whatever else is needed then a build system is probably required anyway. If not, or if a pure flat site is wanted, then &lt;code>grunt/gulp/whatever build&lt;/code> the site and use the outputted files. Yeoman is supposed to be a starting point, not the be-all-end-all build system/workflow.&lt;/p>&lt;ol>&lt;li>Requires more configuration complexity.&lt;/li>&lt;/ol>&lt;p>Counter argument: Doesn't Sass require some setup? Doesn't asset-graph require some complexity? Complexity in the initial setup isn't bad because once configured, it usually doesn't change much or often later. The tools could also be made to be smarted about figuring things out so configuration might not even be required (convention over configuration).&lt;/p>&lt;h2>Conclusion&lt;/h2>&lt;p>Hopefully some compelling reasons have been provided for the change and persuaded some, if not all, nay-sayers as to the wisdom of the change. If not, well this change isn't the only way to do things. If an individual generator wanted to do things differently thats acceptable, if not encouraged. Trying new things is the way change happens and can sometimes lead to better ways of doing things. Sometimes trying a different way will lead you back to the original way and further reinforce why it was that way to begin with.&lt;/p></content>
  </entry>
  
  <entry>
    <title>Yeoman generator version 0.18.0 - Release announcement</title>
    <link href="https://yowebapp.github.io/blog/release-0.18.html"/>
    <updated>2014-10-14T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/release-0.18</id>
    <content type="html">&lt;p>Allo' Allo' today we're happy to announce the release of &lt;a href=https://www.npmjs.com/package/yeoman-generator>yeoman-generator@0.18.0&lt;/a>!&lt;/p>&lt;p>It's been multiple months since our last minor version bump. This new release bring lots of new features and strive at improving the composability features (first introduced in 0.17).&lt;/p>&lt;h2>New features!&lt;/h2>&lt;h3>Storing prompt answers&lt;/h3>&lt;p>Using the &lt;code>{store: true}&lt;/code> property on a prompt will store the user answers in a machine global storage. This mean next time the user run a generator, the default answer will be filled with the value previously stored.&lt;/p>&lt;p>Careful notice, providing a default value prevent user from returning empty answers.&lt;/p>&lt;p>Huge thanks to @stefanbuck for the PR https://github.com/yeoman/generator/pull/688&lt;/p>&lt;h3>New File System&lt;/h3>&lt;p>Since version 0.17, the Yeoman file system proved to be poorly designed to attack composability issues. That's why with 0.18 we release a completely rethought file system abstraction. You can see the discussion and design process &lt;a href=https://github.com/yeoman/generator/issues/658>taking place in this issue&lt;/a>.&lt;/p>&lt;p>Every legacy methods (&lt;code>this.write&lt;/code>, &lt;code>this.copy&lt;/code>, &lt;a href=http://yeoman.io/generator/actions.html>etc&lt;/a>) have been back ported to use this new system. So updating to 0.18.0 should magically improve your generator.&lt;/p>&lt;h4>New &lt;code>fs&lt;/code> methods&lt;/h4>&lt;p>The core system can be accessed on &lt;code>generator.fs&lt;/code>. This object is an instance of &lt;a href=https://github.com/SBoudrias/mem-fs-editor>mem-fs-editor&lt;/a> and provide the same methods.&lt;/p>&lt;p>This system is way simpler than the current legacy method and doesn't do any kind of magic. It won't automatically compile templates (use &lt;code>this.fs.copyTpl()&lt;/code> for this), it won't pass &lt;code>this&lt;/code> as template context, and it won't automatically assume paths are relative to anything.&lt;/p>&lt;p>An example/usual usage would be:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-js data-lang=js>&lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>fs&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>copyTpl&lt;/span>&lt;span class=p>(&lt;/span>
  &lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>templatePath&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=s1>'mocha/base-test.js'&lt;/span>&lt;span class=p>),&lt;/span>
  &lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>destinationPath&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=s1>'test/index.js'&lt;/span>&lt;span class=p>),&lt;/span>
  &lt;span class=p>{&lt;/span> &lt;span class=nx>projectName&lt;/span>&lt;span class=o>:&lt;/span> &lt;span class=s1>'my-awesome-module'&lt;/span> &lt;span class=p>}&lt;/span>
&lt;span class=p>)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, we also added two new paths helpers:&lt;/p>&lt;ol>&lt;li>&lt;code>this.templatePath()&lt;/code> which is: &lt;code>path.join(this.sourceRoot(), ...rest)&lt;/code>&lt;/li> &lt;li>&lt;code>this.destinationPath()&lt;/code> which is: &lt;code>path.join(this.destinationRoot(), ...rest)&lt;/code>&lt;/li>&lt;/ol>&lt;p>Try it out and please give us feedback on how you like this new API. It is more verbose than our legacy methods, but it is clearer and less magical.&lt;/p>&lt;p>&lt;em>Note that the legacy system will remain available at least until version 1.0.0&lt;/em>&lt;/p>&lt;h4>What about the 0.17.0 &lt;code>this.src&lt;/code> and &lt;code>this.dest&lt;/code> file utils&lt;/h4>&lt;p>These should be considered deprecated. The design decision they make isn't a good fit with composability and will create issues on the long run.&lt;/p>&lt;h4>File writing filters&lt;/h4>&lt;p>Ever wished to apply custom filters on every file write? Beautifying files, normalizing whitespace, etc, is now possible.&lt;/p>&lt;p>Once per Yeoman process, we will write every modified files to disk. This process is passed through a &lt;a href=https://github.com/wearefractal/vinyl>vinyl&lt;/a> object stream (just like &lt;a href=http://gulpjs.com/ >gulp&lt;/a>). Any author can register a &lt;code>transformStream&lt;/code> to modify the file path or content.&lt;/p>&lt;p>For example:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-js data-lang=js>&lt;span class=kd>var&lt;/span> &lt;span class=nx>beautify&lt;/span> &lt;span class=o>=&lt;/span> &lt;span class=nx>require&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=s1>'gulp-beautify'&lt;/span>&lt;span class=p>);&lt;/span>
&lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>registerTransformStream&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=nx>beautify&lt;/span>&lt;span class=p>({&lt;/span>&lt;span class=nx>indentSize&lt;/span>&lt;span class=o>:&lt;/span> &lt;span class=mi>2&lt;/span> &lt;span class=p>}));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;strong>every file type will be passed through this stream&lt;/strong>. So make sure any transform stream passthrough unsupported files. Tools like &lt;a href=https://github.com/robrich/gulp-if>gulp-if&lt;/a> or &lt;a href=https://github.com/sindresorhus/gulp-filter>gulp-filter&lt;/a> will help filter invalid type and pass them through.&lt;/p>&lt;p>This new feature means you can basically use any &lt;em>gulp&lt;/em> plugins to process generated files during the writing phase.&lt;/p>&lt;h2>Improvements&lt;/h2>&lt;ul>&lt;li>Tests &lt;a href=http://yeoman.io/authoring/testing.html>using &lt;code>helpers.run()&lt;/code>&lt;/a> won't output to the console keeping the test output clean. Every log method is now a &lt;code>sinon.stub()&lt;/code> making it easy to assert your generator outputted the correct content.&lt;/li> &lt;li>Testing run context now automatically run your tests in a unique tmpdir. No need to manually call &lt;code>helper.run().inDir()&lt;/code> anymore.&lt;/li> &lt;li>&lt;code>assert.fileContent&lt;/code> and &lt;code>assert.noFileContent&lt;/code> accept a String as arguments (before we just accepted Regex)&lt;/li> &lt;li>The Conflicter have been refactored to be simple and easy to use.&lt;/li>&lt;/ul>&lt;h3>Installation methods only running once&lt;/h3>&lt;p>&lt;code>npm&lt;/code> and &lt;code>bower&lt;/code> installation helpers are now always running once per process. This was a change made in 0.17, but we extended the feature to cover every use/methods who could launch these process.&lt;/p>&lt;p>This was a breaking an edge case in 0.17. But for the sake of clarity, let's be clear. The following construct will break:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-js data-lang=js>&lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>installDependencies&lt;/span>&lt;span class=p>({&lt;/span>
  &lt;span class=nx>callback&lt;/span>&lt;span class=o>:&lt;/span> &lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>async&lt;/span>&lt;span class=p>()&lt;/span> &lt;span class=c1>// This will block the process forever, and node will fail&lt;/span>
&lt;span class=p>});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every install method will be registered on the &lt;a href=http://yeoman.io/authoring/running-context.html>&lt;code>install&lt;/code> run queue&lt;/a>. Using &lt;code>this.async()&lt;/code> as a callback will create a deadlock.&lt;/p>&lt;h2>Fixes&lt;/h2>&lt;ul>&lt;li>Installation methods (npm, bower helpers) now correctly pass the options to the spawn process.&lt;/li> &lt;li>When a conflict occurs on a directory, we don't show the &lt;code>diff&lt;/code> option anymore. (selecting diff on directory threw an error)&lt;/li> &lt;li>You can now correctly overwrite the &lt;code>stdio&lt;/code> with &lt;code>generator.spawnCommand()&lt;/code>&lt;/li> &lt;li>&lt;code>generator.composeWith()&lt;/code> now correctly resolve the &lt;code>local&lt;/code> option path.&lt;/li>&lt;/ul>&lt;h2>Meta&lt;/h2>&lt;ul>&lt;li>We've extracted &lt;a href=https://github.com/yeoman/environment>yeoman-environment&lt;/a> on it's own repository. This mean these two core Yeoman parts can now evolve at their own pace.&lt;/li> &lt;li>All our tests now uses tmpdir for testing making them more reliable.&lt;/li> &lt;li>Completely remove network connection from our test suite - it is now way faster.&lt;/li>&lt;/ul>&lt;h2>Potentially breaking change&lt;/h2>&lt;ul>&lt;li>We stopped manually mocking Inquirer in tests. Mainly because Inquirer parses values in ways we didn't imitate and this caused too much issue. Now we rely more on Inquirer and only mock the minimum. This also mean we don't create the magic &lt;code>errors&lt;/code> property during test. You can listen for generator errors instead.&lt;/li> &lt;li>We removed &lt;code>require('yeoman-generator').inquirer&lt;/code>. Require your own version from now on.&lt;/li> &lt;li>We removed &lt;code>generator.shell&lt;/code> and &lt;code>generator.request&lt;/code>. Require your own version.&lt;/li>&lt;/ul>&lt;h2>In conclusion&lt;/h2>&lt;p>The work is still not completed. We still need to update some of our website documentation to include the new APIs methods. And we'll need to update our core generators to this new version. These should come soon, in the meantime refer to this post about the new features.&lt;/p>&lt;p>So, enjoy this new release! Please upgrade and let us know how the API feels, and as usual feel free to report any bug you encounter!&lt;/p>&lt;p>Cheers&lt;/p></content>
  </entry>
  
  <entry>
    <title>Karma Generator Rewrite 0.8.0</title>
    <link href="https://yowebapp.github.io/blog/generator-karma-rewrite.html"/>
    <updated>2014-05-12T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/generator-karma-rewrite</id>
    <content type="html">&lt;p>Allo' allo'! Here's &lt;a href=https://github.com/eddiemonge>Eddie&lt;/a> from the Yeoman team on the recent changes to the Karma Generator. The changes focused on configuration and testing.&lt;/p>&lt;h2>Why was a Rewrite Necessary?&lt;/h2>&lt;p>&lt;strong>tl;dr&lt;/strong>: a rewrite was not necessary. The &lt;a href=https://github.com/yeoman/generator>Angular generator&lt;/a> needed some changes to continue to work.&lt;/p>&lt;p>The &lt;a href=http://karma-runner.github.io/ >Karma Team&lt;/a> recently made some changes to the way Karma &lt;a href=https://github.com/karma-runner/karma/blob/master/CHANGELOG.md#breaking-changes>installs its plugins&lt;/a>. Before, it would install a lot of default plugins. Now it does not install any plugins. Many people viewed this as a pretty bad change. In fact it is a great change because bloatware is not included anymore. Only the plugins users want are now installed.&lt;/p>&lt;p>The Angular generator used the Karma generator to write its testing components. The Karma change led to testing not working out of the box. The tests complained about not being able to do some things like launch browsers. A quick fix was to install the missing plugins as part of the Angular generation process. This was not an ideal fix as it made the project more fragile and less composable. A better solution was to make the Karma generator be more customizable.&lt;/p>&lt;p>Also, this was a good project to test the new 0.17.0 changes to the &lt;a href=https://github.com/yeoman/generator>Generator system&lt;/a>.&lt;/p>&lt;h2>What was the Goal of the Rewrite?&lt;/h2>&lt;ul>&lt;li>Use the new 0.17.0 Yeoman Generator&lt;/li> &lt;li>Better testing overall&lt;/li> &lt;li>Support customizing almost everything in the Karma config&lt;/li> &lt;li>Install user requested Karma plugins (and required ones not explicitly specified)&lt;/li> &lt;li>Write Gruntfile.js config block and task&lt;/li>&lt;/ul>&lt;h3>0.17.0 Yeoman Generator&lt;/h3>&lt;p>&lt;a href=https://github.com/sboudrias>Simon&lt;/a> recently made a lot of changes to the Yeoman Generator system that needed some real world testing. While every new feature wasn't tested, the core features got some exposure. This includes easier testing methods, simpler generator syntax and Gruntfile integration&lt;a href=#coffeescript-gruntfile-support>*&lt;/a>.&lt;/p>&lt;h3>Testing&lt;/h3>&lt;p>The new Generator system made testing the rewrite a pleasure instead of a dreaded task. It reduced the amount of code needed while making it more readable. That usually does not happen so it was a welcome change.&lt;/p>&lt;p>The generator tests now cover testing the options and file creation instead of doing both at the same time. This should ensure more accuracy from the tests as the pieces get tested on their own. Every source code change is verifiable; no more worrying about if this or that change will break the whole thing.&lt;/p>&lt;h3>Customizations&lt;/h3>&lt;p>There are few parts of the generator that are not customizable now. Here is a small list of the the options that are available:&lt;/p>&lt;ul>&lt;li>Specify what browsers to run the tests in (defaults to PhantomJS)&lt;/li> &lt;li>What framework to use (defaults to Jasmine)&lt;/li> &lt;li>Which files to test&lt;/li> &lt;li>What plugins to use. Missing plugins, like a framework or browser, get added by the generator.&lt;/li> &lt;li>Where the config files get written to (including the name and path)&lt;/li>&lt;/ul>&lt;p>This is not the complete list. For that, check out the project's &lt;a href=https://github.com/yeoman/generator-karma>README&lt;/a>.&lt;/p>&lt;h3>Gruntfile&lt;/h3>&lt;p>The generator also tries to add the appropriate Gruntfile configuration blocks and tasks. This is a welcome change from having to do it by hand and hoping to get it right. For Gruntfiles written in CoffeeScript, see the &lt;a href=#coffeescript-gruntfile-support>CoffeeScript note&lt;/a>.&lt;/p>&lt;h6>CoffeeScript Gruntfile Support&lt;/h6>&lt;p>CoffeeScript does not have a parser to be able to read it programmatically and insert the config (if it does, pull requests are welcome). Because of this, the Generator system cannot write the configs. :(&lt;/p>&lt;h2>The Dark Side&lt;/h2>&lt;p>Not everything is peachy though; there are a few downsides to this rewrite. The first, which is also an upside, is that this is no longer Angular-centric. &lt;code>angular-scenario&lt;/code> and &lt;code>angular-mock&lt;/code> are no longer installed by default. To use them, add them as components in the &lt;code>bower-components&lt;/code> option. The other change is that there are not any more default plugins specified other than the two needed for Jasmine and PhantomJS.&lt;/p>&lt;h2>Vs &lt;code>karma init&lt;/code>&lt;/h2>&lt;p>With &lt;code>karma init&lt;/code> isn't this generator kind of pointless?&lt;/p>&lt;p>No. &lt;code>karma init&lt;/code> scaffolds out a basic configuration file but does not give the option to customize as much as this does. It also does not update the Gruntfile. This generator provides that, allows it to composed with other generators and installs dependencies.&lt;/p>&lt;h2>Wrap-Up&lt;/h2>&lt;p>Its my hope that this rewrite is a sign of things to come for the other Yeoman generators. If nothing else, at least the testing should bring smiles to many faces since it is better tested now.&lt;/p>&lt;p>As always, please file bug reports at the &lt;a href=https://github.com/yeoman/generator-karma/issues>issues page&lt;/a>. Pull requests are always welcome but be sure to start with an issue proposing the change(s).&lt;/p></content>
  </entry>
  
  <entry>
    <title>Yeoman Generator 0.17.0 prerelease 1</title>
    <link href="https://yowebapp.github.io/blog/generator-0.17.html"/>
    <updated>2014-03-11T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/generator-0.17</id>
    <content type="html">&lt;p>Allo' allo' here's &lt;a href=https://github.com/SBoudrias>Simon&lt;/a> for the Yeoman team.&lt;/p>&lt;p>After about a month without release of the core system, we're really happy to announce &lt;a href=https://github.com/yeoman/generator/releases/tag/v0.17.0-pre.1>yeoman-generator version 0.17.0-pre&lt;/a>. Our release cycle have been delayed because this is a fairly big release!&lt;/p>&lt;p>First of all, we published &lt;code>0.17.0-pre&lt;/code> on NPM as a pre-release. Make sure to install it with &lt;code>npm install yeoman-generator --tag pre&lt;/code>.&lt;/p>&lt;p>Follow through for an overview of the major changes.&lt;/p>&lt;h2>Composability&lt;/h2>&lt;p>As stated on our &lt;a href=https://github.com/yeoman/yeoman/issues/1264>2014 roadmap&lt;/a>, composability is our next major core feature.&lt;/p>&lt;p>Composability will allow us to write smaller base generators for common needs, and enable generator authors to build higher-level generators which reuse them. That'll make for more centralized works and improvements. For example, we'll only need a single CSS or Bootstrap generator. Every other generator will be able to concentrate on their domain problems and rely on base generators to handle the rest.&lt;/p>&lt;p>With 0.17, we bring two major improvements to ease composability issues: a run loop and the &lt;code>composeWith&lt;/code> method.&lt;/p>&lt;h3>Run loop&lt;/h3>&lt;p>With Yeoman each methods on a generator's prototype is a task and run in a synchronous serie. In the current state, a generator will run all its methods; and then call another generator who'll only run then.&lt;/p>&lt;p>To allow generators to really run side by side, we needed to allow them to run together instead of one after the other.&lt;/p>&lt;p>To make this happen, we implemented a run loop that registers task with particular priorities. Higher priorities will run first, and lower priorities would run at the end.&lt;/p>&lt;p>You can read the full documentation about the run loop inside our &lt;a href=https://github.com/yeoman/yeoman.github.io/blob/source/app/authoring/running-context.md#the-run-loop>new documentation&lt;/a>. This documentation is still WIP and will be released with 0.17.0 complete.&lt;/p>&lt;h3>&lt;code>composeWith()&lt;/code>&lt;/h3>&lt;p>This new method is almost like the previous &lt;code>invoke&lt;/code> method. The only difference being it'll add the composed generator to the run loop.&lt;/p>&lt;p>You can read more about &lt;code>composeWith&lt;/code> &lt;a href=https://github.com/yeoman/yeoman.github.io/blob/source/app/authoring/composability.md>in our new documentation&lt;/a>.&lt;/p>&lt;h2>Enjoy testing your Generators&lt;/h2>&lt;p>Unit testing a generator can be daunting. To ease the pain, this release include new tests helpers. These helpers creates a RunContext object who take care of setting and running a generator for you.&lt;/p>&lt;p>&lt;a href=https://github.com/yeoman/yeoman.github.io/blob/source/app/authoring/testing.md>Read the documentation&lt;/a> to learn more about it!&lt;/p>&lt;h2>And then?&lt;/h2>&lt;p>As you can see, this is a pretty major release. The run loop is not exactly a breaking change, but it could cause issues if name "conflict" with a priority.&lt;/p>&lt;p>We launch this pre-release to allow you to test it and bring as much feedback as we can before carving 0.17 features into stone. Please update your generators and tell us how it's been!&lt;/p>&lt;p>Until next time!&lt;/p></content>
  </entry>
  
  <entry>
    <title>Yeoman updates for Friday, March 7th.</title>
    <link href="https://yowebapp.github.io/blog/releases-march-7th.html"/>
    <updated>2014-03-07T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/releases-march-7th</id>
    <content type="html">&lt;p>First off, Happy Friday!&lt;/p>&lt;p>&lt;img src=http://i.imgur.com/WHfJgag.jpg>&lt;/p>&lt;p>Today we released updates to six of our official generators. The complete changelogs can be found in our linked release pages lower down.&lt;/p>&lt;p>Sindre also released a new version of his &lt;a href=https://github.com/sindresorhus/generator-gulp-plugin-boilerplate>Gulp plugin generator&lt;/a>, Hemanth released an &lt;a href=https://github.com/hemanth/generator-atom>Atom Editor package generator&lt;/a> and Rob updated &lt;a href=https://github.com/yeoman/grunt-bower-requirejs>grunt-bower-requirejs&lt;/a>. Simon is almost ready shipping a huge new feature for &lt;code>yo&lt;/code> (&lt;a href=https://github.com/yeoman/generator/commits/master>composability&lt;/a>), which we hope to talk about in the next few weeks. Leonardo, Eddie and Rob have been working on a completely new mobile-first design for &lt;code>yeoman.io&lt;/code> which they hope to get out in the next month. Kevin has been helping out all over the place.&lt;/p>&lt;p>Peter has continued his work on &lt;a href=https://github.com/assetgraph/assetgraph>AssetGraph&lt;/a> and for the brave of heart there's an experimental Yeoman &lt;a href=https://github.com/Munter/generator-webapp-assetgraph>Webapp generator&lt;/a> using it that's available to play with.&lt;/p>&lt;h2>Release Highlights&lt;/h2>&lt;ul>&lt;li>Our Gulp WebApp generator now supports &lt;a href=https://github.com/yeoman/generator-gulp-webapp/commit/f594d53a2f558208ab011398a96a9de4b1f853b1>wiredep&lt;/a> so any dependencies installed with Bower will be automatically wired up to your index for you.&lt;/li> &lt;li>Our Backbone generator now provides more useful boilerplate scaffolding (thanks to the community, and Revath for maintaining)&lt;/li> &lt;li>Our Grunt WebApp generator gets a big update with numerous stability fixes. We've also switched to using the official Bootstrap Sass package.&lt;/li>&lt;/ul>&lt;h2>Releases&lt;/h2>&lt;ul>&lt;li>&lt;a href=https://github.com/yeoman/generator-gulp-webapp/releases/tag/v0.0.4>Gulp WebApp generator -- 0.0.4&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/yeoman/generator-webapp/releases/tag/v0.4.8>Grunt WebApp generator -- 0.4.8&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/yeoman/generator-gruntplugin/releases/tag/v0.0.7>Grunt Plugin generator -- 0.0.7&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/yeoman/generator-generator/releases/tag/v0.4.3>Generator generator -- 0.4.3&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/yeoman/generator-backbone/releases/tag/v0.2.5>Backbone generator -- 0.2.5&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/yeoman/generator-jquery/releases/tag/v0.0.9>jQuery generator -- 0.0.9&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Community&lt;/h2>&lt;p>On the community-front, we've started work on our next monthly digest but until then enjoy this quick video on &lt;a href=http://tagtree.tv/angular-with-yeoman>building a budgeting webapp&lt;/a> with Yo and Angular.&lt;/p>&lt;p>Until next time, have an awesome weekend!&lt;/p>&lt;p>~ Addy and the team&lt;/p></content>
  </entry>
  
  <entry>
    <title>Grunt And Gulp Tasks For Performance Optimization</title>
    <link href="https://yowebapp.github.io/blog/performance-optimization.html"/>
    <updated>2014-03-04T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/performance-optimization</id>
    <content type="html">&lt;p>&lt;img src=/static/tasks.c4b5a0c9f3.jpg alt="">&lt;/p>&lt;p>Delays in performance have the potential to impact user &lt;a href=https://twitter.com/igrigorik/status/300226402496704512>engagement&lt;/a>, &lt;a href=http://www.smashingmagazine.com/2013/06/10/pinterest-paint-performance-case-study/ >experience&lt;/a> and &lt;a href=https://speakerdeck.com/lara/designing-for-performance>revenue&lt;/a>. Thankfully, Google's 'Make The Web Faster' team recommend a set of best-practice &lt;a href=https://developers.google.com/speed/docs/insights/rules>rules&lt;/a> for keeping your pages lean, fast and smooth. These include minifying resources like CSS and JavaScript, optimizing images, inlining and removing unused styles and so on.&lt;/p>&lt;p>If you have complete control over your server, an excellent &lt;a href=https://developers.google.com/speed/pagespeed/ >PageSpeed&lt;/a> &lt;a href=https://developers.google.com/speed/pagespeed/module>Module&lt;/a> for &lt;a href=https://developers.google.com/speed/pagespeed/module/download>Apache&lt;/a> and &lt;a href=https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source>Nginx&lt;/a> exists with filters for many of these tasks. If not however, or you feel the module isn’t quite for you, a number of build-tasks exist for tools you’re probably already using to fill in the gaps with more granular control.&lt;/p>&lt;p>The below represent &lt;a href=http://gruntjs.com>Grunt&lt;/a> and &lt;a href=http://gulpjs.com>Gulp&lt;/a> tasks the Yeoman team regularly use in our projects. We’ve tried our best to keep this list focused and exclude previous suggestions which no-longer offer as much value, but there’s plenty here to help you keep your pages and their resources as small as possible.&lt;/p>&lt;div class=note>&lt;strong>Note:&lt;/strong> Yeoman's &lt;a href=https://github.com/yeoman/generator-webapp>Grunt&lt;/a> and &lt;a href=https://github.com/yeoman/generator-gulp-webapp>Gulp&lt;/a> webapp generators include tasks for optimizing images and concatenating and minifying HTML/CSS/JS. We feel that this provides a healthy baseline, but this post will cover tasks which go further.&lt;/div>&lt;h2>Compress &amp;amp; optimize images&lt;/h2>&lt;p>The average web page is now over &lt;a href="http://httparchive.org/interesting.php?a=All&amp;amp;l=Aug%2015%202013#bytesperpage">1.5MB&lt;/a> in size, with images responsible for the bulk of this. We aim to keep our image sizes as lean as possible to reduce the time it takes for a user to wait for that resource to load.&lt;/p>&lt;p>With the right balance of compression and formatting it's possible to still ship images as a part of your page whilst minimizing load time as much as possible. This is really important for users on mobile with limited data plans or slow connections.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/gruntjs/grunt-contrib-imagemin>grunt-contrib-imagemin&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/JamieMason/grunt-imageoptim>grunt-imageoptim&lt;/a> (OSX only)&lt;/li>&lt;/ul>&lt;p>Why two tasks? Well, here’s an excellent &lt;a href=http://jamiemason.github.io/ImageOptim-CLI/ >breakdown&lt;/a> of differences between the two. Choose the one that is most suitable for you.&lt;/p>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/sindresorhus/gulp-imagemin>gulp-imagemin&lt;/a>&lt;/li>&lt;/ul>&lt;div class=note>&lt;strong>Note:&lt;/strong> Etsy found that just by &lt;a href=http://radar.oreilly.com/2014/01/web-performance-is-user-experience.html>adding&lt;/a> 160KB of images to their pages on mobile, their bounce rate increased by 12%. If you can't cut down on the images used in your pages, at least run them through an optimizer.&lt;/div>&lt;h2>Generate responsive images for the &lt;code>&amp;lt;picture&amp;gt;&lt;/code> element&lt;/h2>&lt;p>If you have a responsive site which is visually flexible on multiple devices, you'll want a strategy to make images flexible too.&lt;/p>&lt;p>Serving unnecessarily large images to the browser can &lt;a href=http://timkadlec.com/2013/11/why-we-need-responsive-images-part-deux/ >impact&lt;/a> both rendering and load performance, but these aren't the only metrics that can suffer when large images are shipped to the browser.&lt;/p>&lt;p>This is one reason we need responsive images, and it's great to see &lt;a href="http://blog.chromium.org/2014/02/chrome-34-responsive-images-and_9316.html?m=1">srcset&lt;/a> - hopefully leading to a full implementation of &lt;code>&amp;lt;picture&amp;gt;&lt;/code> - is already in Chrome Beta.&lt;/p>&lt;p>There are a number of Grunt tasks available that can help generate multi-resolution images as part of your build process.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/andismith/grunt-responsive-images>grunt-responsive-images&lt;/a> - use this along with &lt;a href=https://github.com/BBC-News/Imager.js/ >Imager.js&lt;/a>, &lt;code>&amp;lt;picture&amp;gt;&lt;/code> or the picturefill &lt;a href=https://github.com/jansepar/picturefill>polyfill&lt;/a>.&lt;/li> &lt;li>&lt;a href=https://www.npmjs.com/package/grunt-clowncar>grunt-clowncar&lt;/a>&lt;/li>&lt;/ul>&lt;p>In addition, if you need to just resize/normalize images that are large in dimension, you can use &lt;a href=https://www.npmjs.com/package/grunt-image-resize>grunt-image-resize&lt;/a>.&lt;/p>&lt;div class=note>&lt;strong>Note:&lt;/strong> Tim Kaldec's research into responsive images has &lt;a href=http://timkadlec.com/2013/06/why-we-need-responsive-images/ >suggested&lt;/a> a responsive images strategy could lead to savings of up to 72% on image weight. Whilst it is still early to opt for a spec-compatible, cross-browser approach to responsive images the BBC and Guardian have been using Imager.js for this successfully.&lt;/div>&lt;h2>Minify SVG images&lt;/h2>&lt;p>SVG files created with editors usually contain a large quantity of redundant information (metadata, comments, hidden elements and so forth). This content can be safely removed or converted to a more minimal form without imacting the final SVG that's being rendered.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/sindresorhus/grunt-svgmin>grunt-svgmin&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-svgmin>gulp-svgmin&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Generate spritesheets&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/grunt-spritesmith>grunt-spritesmith&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-sprite>gulp-sprite&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Convert images to WebP&lt;/h2>&lt;p>WebP is a recent image format that offers lossless and lossy compression for images on the web. WebP lossless images are up to 26% smaller in size compared to PNGs and WebP lossy images are 25-34% smaller in size compared to JPEGs. That's quite a saving and thankfully there exist tasks for encoding to WebP for both Grunt and Gulp.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/somerandomdude/grunt-webp>grunt-webp&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/sindresorhus/gulp-webp>gulp-webp&lt;/a>&lt;/li>&lt;/ul>&lt;div class=note>&lt;strong>Note:&lt;/strong> This &lt;a href="http://www.webpagetest.org/video/compare.php?tests=130125_6N_KZA%2C130125_NH_KZ8&amp;amp;thumbSize=200&amp;amp;ival=100&amp;amp;end=full">test&lt;/a> from WebPageTest suggests that compared to JPEG, WebP encoded images complete loading much quicker due to their smaller filesizes. The Chrome Web Store &lt;a href=https://www.igvita.com/2013/03/07/faster-smaller-and-more-beautiful-web-with-webp/ >found&lt;/a> that switching to WebP saw a 30% average saving on bytes, saving them several terabytes of bandwidth a day.&lt;/div>&lt;h2>Build SVG sprites with support for various browsers&lt;/h2>&lt;h3>Grunt&lt;/h3>&lt;ul>&lt;li>&lt;a href=https://github.com/filamentgroup/grunticon>grunticon&lt;/a>&lt;/li>&lt;/ul>&lt;h3>Gulp&lt;/h3>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-svgmin>gulp-svgmin&lt;/a>&lt;/li>&lt;/ul>&lt;p>We consider inlining images using Data URIs to now be an anti-pattern given their &lt;a href=http://www.mobify.com/blog/data-uris-are-slow-on-mobile/ >poor&lt;/a> performance on mobile.&lt;/p>&lt;h2>Minify CSS&lt;/h2>&lt;p>Minification eliminates unnecessary space, line breaks, indendation and characters in your files, which are generally unnecessary in production. Compacting down your HTML, CSS and JS can improve on parsing, execution and doanload times. For CSS specifically, we recommend:&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/gruntjs/grunt-contrib-cssmin>grunt-contrib-cssmin&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-cssmin>gulp-cssmin&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Remove unused CSS&lt;/h2>&lt;p>In projects using CSS frameworks like Bootstrap, Foundation and so forth you typically don’t use the entire kitchen-sink of styles available. Rather than shipping the full framework to production, use UnCSS to remove unused styles across your pages. Some developers have seen anything up to 85% savings in stylesheet filesize.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/addyosmani/grunt-uncss>grunt-uncss&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/ben-eb/gulp-uncss>gulp-uncss&lt;/a>&lt;/li>&lt;/ul>&lt;div class=note>&lt;strong>Note:&lt;/strong> A question developers regularly ask is whether UnCSS, or the process of removing unused CSS can also work with styles injected into the page dynamically. The answer is 'yes'. UnCSS works in tandem with PhantomJS in order to make this happen. Devs have seen anything between &lt;a href=https://twitter.com/efexen/status/438672726996574209>10&lt;/a>-&lt;a href=https://twitter.com/thisbetom/status/432575411138998273>120KB&lt;/a> in savings on a typical Bootstrap page and UnCSS also works well with other frameworks.&lt;/div>&lt;h2>Inline CSS&lt;/h2>&lt;p>If the external CSS resources for a particular page are small, you can inline those directly in your markup to save on additional requests. Inlining small CSS in this way allows the browser to proceed with rendering the page.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/jgallen23/grunt-inline-css>grunt-inline-css&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-inline-css/ >gulp-inline-css&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Combine media queries&lt;/h2>&lt;p>This isn't a PageSpeed recommendation, but allows you to combine matching media queries into a single media query definition. We've found it useful for handling CSS generated by preprocessors which may use nested media queries.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/grunt-combine-media-queries>grunt-combine-media-queries&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-combine-media-queries>gulp-combine-media-queries&lt;/a>&lt;/li>&lt;/ul>&lt;h2>JavaScript&lt;/h2>&lt;h3>Minify, compress JS&lt;/h3>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/gruntjs/grunt-contrib-uglify>grunt-contrib-uglify&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/gmarty/grunt-closure-compiler>grunt-closure-compiler&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/terinjokes/gulp-uglify>gulp-uglify&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/steida/gulp-closure-compiler>gulp-closure-compiler&lt;/a>&lt;/li>&lt;/ul>&lt;h2>RequireJS (optimization via r.js)&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/asciidisco/grunt-requirejs>grunt-requirejs&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=http://requirejs.org>RequireJS&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Minify HTML&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/gruntjs/grunt-contrib-htmlmin>grunt-contrib-htmlmin&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/jonschlinkert/gulp-htmlmin>gulp-htmlmin&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Simple concatenation&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/gruntjs/grunt-contrib-concat>grunt-contrib-concat&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-concat>gulp-concat&lt;/a>&lt;/li>&lt;/ul>&lt;h2>General compression for files/folders&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/grunt-contrib-compress>grunt-contrib-compress&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/sindresorhus/gulp-zip>gulp-zip&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Zopfli compression&lt;/h2>&lt;p>The Zopfli Compression Algorithm is an open-source compression library that generates output typically 3–8% smaller compared to zlib at maximum compression. It is best suited for apps where data is compressed just once and then sent over the network lots of times.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/mathiasbynens/grunt-zopfli>grunt-zopfli&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/gulp-zopfli>gulp-zopfli&lt;/a>&lt;/li>&lt;/ul>&lt;div class=note>&lt;strong>Note:&lt;/strong> When Google Fonts switched to using Zopfli fonts were ~6% smaller on average, and in some cases up to 15% smaller. According to &lt;a href=https://plus.google.com/+IlyaGrigorik/posts/1sxencNkbNS>Ilya Grigorik&lt;/a>, for the case of Open Sans it was more than 10% smaller, translating to faster rendering and loading times. Zopfli images can however take longer to decode than JPGs so measure the metrics that matter to you when deciding whether to use WebP.&lt;/div>&lt;h2>Inline Critical path CSS&lt;/h2>&lt;p>The critical path represents the code and resources needed to render the "above-the-fold" content in the page - i.e what your users will first see when they load up your page. PageSpeed recommends inlining your critical path CSS for improved performance. Whilst tools like &lt;a href=https://code.google.com/p/modpagespeed/ >mod_pagespeed&lt;/a> are highly efficient at achieving this, it’s more difficult to optimize for the critical path with other tooling.&lt;/p>&lt;p>You could probably use PhantomJS along with the above the fold scripts from &lt;a href=https://github.com/r3b/speedreport/ >speedreport&lt;/a> to get an idea of what CSS is above the fold and can then work on optimizing this manually.&lt;/p>&lt;div class=note>&lt;strong>Note:&lt;/strong> Paul Kinlan wrote a &lt;a href=http://addyosmani.com/blog/detecting-critical-above-the-fold-css-with-paul-kinlan-video/ >bookmarklet&lt;/a> for estimating the above-the-fold CSS for a page which is also worth checking out.&lt;/div>&lt;h2>Asset pipeline (auto-handle all optimizations)&lt;/h2>&lt;p>On the ‘tools to keep an eye on’ list is &lt;a href=https://github.com/assetgraph/assetgraph>AssetGraph&lt;/a>.&lt;/p>&lt;p>AssetGraph looks at projects as a set of graph problems where the nodes are considered assets (HTML, CSS, Images, JS) and edges, the relationships between them (image tags, anchor tag, script tags etc).&lt;/p>&lt;p>As AssetGraph can determine how project assets relate to each other it can perform many of the common performance optimizations developers may want to achieve on their own automatically. This works particularly well on smaller projects and support for larger projects is being worked on.&lt;/p>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/Munter/grunt-reduce>grunt-reduce&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;p>Gulp users should just use AssetGraph directly.&lt;/p>&lt;h2>Benchmarking&lt;/h2>&lt;p>The following benchmarking tasks are useful to integrate as a part of Continuous Integration. Although the following are currently only available for Grunt, you can use &lt;a href=https://www.npmjs.com/package/gulp-grunt>gulp-grunt&lt;/a> to run Grunt tasks from Gulp. We recommend:&lt;/p>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/grunt-pagespeed>grunt-pagespeed&lt;/a> - fantastic for automating checking your PageSpeed score as a part of CI.&lt;/li> &lt;li>&lt;a href=https://github.com/topcoat/topcoat-grunt-telemetry>grunt-topcoat-telemetry&lt;/a> - get smoothness, load time and other stats from Telemetry as part of CI. This could help you set up a performance benchmarking dashboard similar to the one used by &lt;a href=http://bench.topcoat.io/ >TopCoat&lt;/a>&lt;/li> &lt;li>&lt;a href=https://www.npmjs.com/package/grunt-wpt>grunt-wpt&lt;/a> - CI for WebPageTest scores&lt;/li> &lt;li>&lt;a href=https://www.npmjs.com/package/grunt-phantomas>grunt-phantomas&lt;/a> - response times for requests, responses, time to first image/CSS/JS, onDOMReady and more.&lt;/li>&lt;/ul>&lt;h2>Framework Optimization&lt;/h2>&lt;h4>Grunt&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://www.npmjs.com/package/grunt-ngmin>grunt-ngmin&lt;/a>&lt;/li> &lt;li>&lt;a href=https://www.npmjs.com/package/grunt-react>grunt-react&lt;/a>&lt;/li> &lt;li>&lt;a href=https://www.npmjs.com/package/grunt-vulcanize>grunt-vulcanize&lt;/a> - excellent for concatenating and flatening Web Components.&lt;/li>&lt;/ul>&lt;h4>Gulp&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/Kagami/gulp-ng-annotate>gulp-ng-annotate&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/sindresorhus/gulp-react>gulp-react&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/sindresorhus/gulp-vulcanize>gulp-vulcanize&lt;/a>&lt;/li>&lt;/ul>&lt;h4>Misch&lt;/h4>&lt;ul>&lt;li>&lt;a href=https://github.com/sindresorhus/gulp-google-cdn>gulp-google-cdn&lt;/a>&lt;/li> &lt;li>&lt;a href=https://github.com/sindresorhus/gulp-size>gulp-size&lt;/a>&lt;/li>&lt;/ul>&lt;h2>Conclusions&lt;/h2>&lt;p>Delays in performance have the potential to impact user engagement, experience and revenue. Take time to experiment with the tasks available for performance optimization, find out what practical gains they can offer to your projects.&lt;/p>&lt;p>Visitors to your page will be happier as a result of a snappier experience and a faster web is better for all.&lt;/p>&lt;p>~ Addy Osmani&lt;/p>&lt;p>&lt;em>With thanks to Sindre Sorhus, Pascal Hartig and Stephen Sawchuk for their review&lt;/em>&lt;/p></content>
  </entry>
  
  <entry>
    <title>What's new in the Backbone generator</title>
    <link href="https://yowebapp.github.io/blog/whats-new-in-backbone-generator.html"/>
    <updated>2014-02-11T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/whats-new-in-backbone-generator</id>
    <content type="html">&lt;p>The Backbone generator has had a few major updates recently and we wanted to share these changes with the community. The theme of the changes is to make the generator more flexible. There is also some updates related to testing and styling we wanted to share.&lt;/p>&lt;h2>Custom app path&lt;/h2>&lt;p>Before, the scaffold generated the project's application files into the app folder. Now you can customize it using the &lt;code>--appPath&lt;/code> option.&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-sh data-lang=sh>yo backbone --appPath&lt;span class=o>=&lt;/span>public
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create a folder named &lt;code>public&lt;/code> instead of &lt;code>app&lt;/code>. It will then put the scaffolded code into that folder. When you use a sub-generator, like &lt;code>backbone:model&lt;/code>, the scaffold will use the &lt;code>public&lt;/code> directory.&lt;/p>&lt;p>&lt;img src=/static/backbone-app-path.683bee1aac.png alt="app-path option">&lt;/p>&lt;h2>Generating &lt;a href=http://mochajs.org/ >Mocha&lt;/a> tests&lt;/h2>&lt;p>We have written a new generator named &lt;a href=https://github.com/revathskumar/generator-backbone-mocha>generator-backbone-mocha&lt;/a>. This will generate Mocha tests for your Backbone app. When you create new model with &lt;code>yo backbone:model todo&lt;/code>, this will create &lt;code>todo.spec.js&lt;/code> in your &lt;code>test&lt;/code> folder.&lt;/p>&lt;p>&lt;img src=/static/yo-backbone-mocha.c506420472.png alt="Backbone mocha">&lt;/p>&lt;p>You can choose BDD/TDD when generating the new Backbone app with the &lt;code>--ui&lt;/code> option.&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-sh data-lang=sh>yo backbone --ui&lt;span class=o>=&lt;/span>tdd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default the generator is setup to use BDD with Mocha.&lt;/p>&lt;h2>Added CoffeeScript support for RequireJS&lt;/h2>&lt;p>Another great addition to the Backbone generator (version 2.0), is CoffeeScript support for RequireJS. A lot of people have requested this and we are happy to announce support for it. Thanks to &lt;a href=https://github.com/stephanebachelier>@stephanebachelier&lt;/a> for the effort in getting this in.&lt;/p>&lt;h2>Bootstrap 3.0&lt;/h2>&lt;p>The last change we want to announce relates to Bootstrap. We have upgraded to Bootstrap 3.0! Now by default, Yeoman will install Bootstrap 3.0 when you generate a new application. Don't fear though, projects can include Bootstrap 2.0 still. After project generation, edit the bower.json file and change the version of (sass-)bootstrap required.&lt;/p>&lt;h2>Other minor updates&lt;/h2>&lt;ul>&lt;li>Dropped support for node 0.8&lt;/li> &lt;li>&lt;code>grunt server&lt;/code> task is now deprecated. &lt;code>grunt serve&lt;/code> has replaced it. For more information, see &lt;a href=https://github.com/yeoman/yeoman/issues/1183>this issue explaining it&lt;/a>&lt;/li> &lt;li>Improved scaffolds&lt;/li>&lt;/ul>&lt;p>We hope you like the new additions and enhancements we have made on the Backbone generator. We are looking for your feedback on keeping this project awesome.&lt;/p></content>
  </entry>
  
  <entry>
    <title>Updates to some of our generators</title>
    <link href="https://yowebapp.github.io/blog/generator-update-feb-0207.html"/>
    <updated>2014-02-07T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/generator-update-feb-0207</id>
    <content type="html">&lt;p>Today we have a few updated generators for your consumption. nom nom nom. As always, we welcome any and all feedback or bug reports on the relevant trackers.&lt;/p>&lt;p>&lt;img src=http://i.imgur.com/hSEppjX.gif>&lt;/p>&lt;h2>Scaffold a Gruntfile&lt;/h2>&lt;p>We released &lt;code>generator-gruntfile&lt;/code> &lt;a href=https://github.com/yeoman/generator-gruntfile/releases/tag/v0.0.9>0.0.9&lt;/a> which scaffolds out a Gruntfile and package.json file if you don't already have one. Changes:&lt;/p>&lt;ul>&lt;li>Improved stability&lt;/li> &lt;li>Fixed peerDependencies issues&lt;/li> &lt;li>Fixed strict mode and JSHint options&lt;/li> &lt;li>Updated dependencies&lt;/li>&lt;/ul>&lt;p>Usage:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g generator-gruntfile
yo gruntfile
&lt;/code>&lt;/pre>&lt;/div>&lt;h2>Scaffold a Grunt plugin&lt;/h2>&lt;p>We released &lt;code>generator-gruntplugin&lt;/code> &lt;a href=https://github.com/yeoman/generator-gruntplugin/releases/tag/v0.0.6>0.0.6&lt;/a> which scaffolds a grunt plugin module including Nodeunit unit tests. Changes:&lt;/p>&lt;ul>&lt;li>Generate package.json from JS object written out as JSON&lt;/li> &lt;li>Bumping dependencies&lt;/li>&lt;/ul>&lt;p>Usage:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g generator-gruntplugin
yo gruntplugin
&lt;/code>&lt;/pre>&lt;/div>&lt;h2>Scaffold a new Node module&lt;/h2>&lt;p>We released &lt;code>generator-node&lt;/code> &lt;a href=https://github.com/yeoman/generator-node/releases/tag/v0.0.7>0.0.7&lt;/a> which scaffolds a Node.js module including Nodeunit unit tests. Useful if you need something a little more than &lt;code>npm init&lt;/code>. Changes:&lt;/p>&lt;ul>&lt;li>Improvements to default values&lt;/li> &lt;li>Updated dependencies&lt;/li> &lt;li>Fixed peerDep issues&lt;/li> &lt;li>Fixed test generation for libs with hypens&lt;/li>&lt;/ul>&lt;p>Usage:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g generator-node
yo node
&lt;/code>&lt;/pre>&lt;/div>&lt;h2>Scaffold a new yo generator&lt;/h2>&lt;p>We released &lt;code>generator-generator&lt;/code> &lt;a href=https://github.com/yeoman/generator-generator/releases/tag/v0.4.2>0.4.2&lt;/a> which scaffolds a new Yeoman generator with some sensible defaults. Changes:&lt;/p>&lt;ul>&lt;li>Updated inherits to extend within templated index files&lt;/li> &lt;li>Update to the Yeoman-Generator 0.16 inheritance method&lt;/li> &lt;li>Update test to use fileContent, update deprecated methods&lt;/li> &lt;li>Hide JSHint warning for camel case&lt;/li> &lt;li>Bump to latest versions of dependencies, improve package.json&lt;/li>&lt;/ul>&lt;p>Usage:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g generator-generator
yo generator
&lt;/code>&lt;/pre>&lt;/div>&lt;h2>Scaffold a project using Bootstrap&lt;/h2>&lt;p>We released &lt;code>generator-bootstrap&lt;/code> &lt;a href=https://github.com/yeoman/generator-bootstrap/releases/tag/v0.1.5>0.1.5&lt;/a> which prompts you for which flavour of Bootstrap you would like to use - Sass, Less, Stylus or just CSS. Changes:&lt;/p>&lt;ul>&lt;li>Switched to latest official version of bootstrap-sass&lt;/li> &lt;li>Switched Less version to components-bootstrap&lt;/li>&lt;/ul>&lt;p>Usage:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g generator-bootstrap
yo bootstrap
&lt;/code>&lt;/pre>&lt;/div>&lt;h2>Backbone and Ember generator updates&lt;/h2>&lt;p>In the past few weeks, we've also released updates to:&lt;/p>&lt;ul>&lt;li>&lt;p>&lt;a href=https://github.com/yeoman/generator-backbone/releases>generator-backbone&lt;/a> - including scaffolding out your mocha tests while generating models/views/collections.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href=https://github.com/yeoman/generator-ember/releases>generator-ember&lt;/a> - better Compass defaults, updates to Ember 1.3.1, Ember Data 1.0.0beta.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href=https://github.com/yeoman/generator-polymer/releases>generator-polymer&lt;/a> - a more Polymerized index.html with further element granularity, updated deps.&lt;/p>&lt;/li>&lt;/ul>&lt;p>We hope you find these updates useful! Happy Friday!&lt;/p>&lt;p>~ Addy and the team.&lt;/p></content>
  </entry>
  
  <entry>
    <title>Exploring A Generator For Gulp.js</title>
    <link href="https://yowebapp.github.io/blog/gulp-explore.html"/>
    <updated>2014-02-03T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/gulp-explore</id>
    <content type="html">&lt;p>Work has begun on our &lt;a href=https://github.com/yeoman/generator-gulp-webapp>first&lt;/a> official Yeoman generator for &lt;a href=http://gulpjs.com>Gulp.js&lt;/a>.&lt;/p>&lt;p>&lt;img src=http://i.imgur.com/TXdznhb.png style=width:150px>&lt;/p>&lt;p>Gulp is a &lt;a href=https://github.com/substack/stream-handbook>streaming&lt;/a> build system which focuses on code over configuration. By harnessing the power of Node streams, it enables faster build times by avoiding the need to write temporary files to disk. You simply put in a file and get a file out.&lt;/p>&lt;p>The Yeoman team don't have any plans on dropping our support for &lt;a href=http://gruntjs.com>Grunt&lt;/a> at all. On the contrary, we feel that both Grunt and Gulp can &lt;a href=https://github.com/yeoman/yeoman/issues/1232>happily co-exist&lt;/a> and hope to support both communities with some automation tooling as best we can.&lt;/p>&lt;p>Our Gulp generator based on our Grunt generator for &lt;a href=https://github.com/yeoman/generator-webapp>web apps&lt;/a> and you can follow along our progress at &lt;a href=https://github.com/yeoman/generator-gulp-webapp>generator-gulp-webapp&lt;/a>. It's still early days, but our &lt;a href=https://github.com/yeoman/generator-gulp-webapp/blob/master/app/templates/gulpfile.js>gulpfile&lt;/a> already contains early work for handling HTML, CSS, JS and images. See the samples below for a peek at what we're doing:&lt;/p>&lt;p>Require Gulp and load our Gulp plugins:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>var gulp = require('gulp');

// Load plugins
var $ = require('gulp-load-plugin')({camelize: true});
var server = $.tinyLr();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Styles:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>gulp.task('styles', function () {
    return gulp.src('app/styles/main.scss')
        .pipe($.sass({
          style: 'expanded',
          loadPath: ['app/bower_components']
        }))
        .pipe($.livereload(server))
        .pipe($.autoprefixer('last 1 version'))
        .pipe($.csso())
        .pipe(gulp.dest('dist/styles'))
        .pipe($.size());
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Scripts:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>gulp.task('scripts', function () {
    return gulp.src('app/scripts/**/*.js')
        .pipe($.jshint('.jshintrc'))
        .pipe($.jshint.reporter('default'))
        .pipe($.concat('main.js'))
        .pipe($.livereload(server))
        .pipe($.uglify())
        .pipe(gulp.dest('dist/scripts'))
        .pipe($.size());
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Images:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>gulp.task('images', function () {
    return gulp.src('app/images/**/*')
        .pipe($.livereload(server))
        .pipe($.cache($.imagemin({
            optimizationLevel: 3,
            progressive: true,
            interlaced: true
        })))
        .pipe(gulp.dest('dist/images'))
        .pipe($.size());
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Watch:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>gulp.task('watch', function () {
    // Listen on port 35729
    server.listen(35729, function (err) {
        if (err) {
            return console.error(err);
        };

        // Watch .html files
        gulp.watch('app/*.html');

        // Watch .scss files
        gulp.watch('app/styles/**/*.scss', ['styles']);

        // Watch .js files
        gulp.watch('app/scripts/**/*.js', ['scripts']);

        // Watch image files
        gulp.watch('app/images/**/*', ['images']);
    });
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clean:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>gulp.task('clean', function () {
    return gulp.src(['dist/styles', 'dist/scripts', 'dist/images'], {read: false}).pipe($.clean());
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>// Build
gulp.task('build', ['html', 'styles', 'scripts', 'images']);

// Default task
gulp.task('default', ['clean'], function () {
    gulp.start('build');
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this time, we welcome community contributions which help us fill in the feature gap in our new generator. Feel free to watch the project repo. We'll let you know as soon as it's finished cooking.&lt;/p>&lt;h2>Further reading&lt;/h2>&lt;p>The below are some of the recent articles on Gulp we've enjoyed reading:&lt;/p>&lt;ul>&lt;li>&lt;a href=http://ponyfoo.com/articles/my-first-gulp-adventure>My First Gulp Adventure&lt;/a>&lt;/li> &lt;li>&lt;a href=http://ponyfoo.com/articles/gulp-grunt-whatever>Gulp, Grunt, Whatever&lt;/a>&lt;/li> &lt;li>&lt;a href=https://travismaynard.com/writing/no-need-to-grunt-take-a-gulp-of-fresh-air>No Need To Grunt, Take A Gulp Of Fresh Air&lt;/a>&lt;/li> &lt;li>&lt;a href=http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/ >Grunt vs Gulp - Beyond the Numbers&lt;/a>&lt;/li>&lt;/ul></content>
  </entry>
  
  <entry>
    <title>Generators New Year Cleanup!</title>
    <link href="https://yowebapp.github.io/blog/cleanup.html"/>
    <updated>2014-01-21T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/cleanup</id>
    <content type="html">&lt;p>A lots of changes and new features have been introduced in the Generator System (&lt;code>npm search yeoman-generator&lt;/code>) lately. If you're not watching the &lt;a href=https://github.com/yeoman/generator>yeoman/generator&lt;/a>, maybe you've been let down on the latest changes. Fear not, we &lt;a href=https://github.com/yeoman/generator/releases>documented every recent release in our changelog&lt;/a>!&lt;/p>&lt;p>Along with the new year start, we've decided to build a todos list of the most important changes our official generators should implement. This will allow them to be clean, but also ready for the new upcoming feature; notably the capacity to compose multiples generators together!&lt;/p>&lt;p>You may not be an official generator maintainer, but we invite you to follow our lead and make sure you follow these guidelines. So, here it goes!&lt;/p>&lt;h3>Generators should generate a &lt;code>.yo-rc.json&lt;/code> file&lt;/h3>&lt;p>The &lt;code>.yo-rc.json&lt;/code> file allow you to save configuration, but is also the marker used to define a project root folder. This allow user from running &lt;code>yo&lt;/code> command from sub directory to work on their whole project.&lt;/p>&lt;p>It is also how composed generators will know what is the root of a project.&lt;/p>&lt;p>Simply add this line somewhere in your generator to generate the file at least once:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-javascript data-lang=javascript>&lt;span class=k>this&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>config&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>save&lt;/span>&lt;span class=p>();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, if you're using the config object to store datas, it'll already be created. &lt;a href=http://yeoman.io/generator/Storage.html>Read more on the config Storage in our API reference&lt;/a>.&lt;/p>&lt;h3>Use the new &lt;code>.extend()&lt;/code> method instead of &lt;code>util.inherit&lt;/code>&lt;/h3>&lt;p>Until recently, you'd extend the Base generator this way:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-javascript data-lang=javascript>&lt;span class=kd>var&lt;/span> &lt;span class=nx>BlogGenerator&lt;/span> &lt;span class=o>=&lt;/span> &lt;span class=nx>module&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>exports&lt;/span> &lt;span class=o>=&lt;/span> &lt;span class=kd>function&lt;/span> &lt;span class=p>()&lt;/span> &lt;span class=p>{&lt;/span>
  &lt;span class=nx>generators&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>Base&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>apply&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=k>this&lt;/span>&lt;span class=p>,&lt;/span> &lt;span class=nx>arguments&lt;/span>&lt;span class=p>);&lt;/span>
  &lt;span class=c1>// ...&lt;/span>
&lt;span class=p>};&lt;/span>

&lt;span class=nx>util&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>inherits&lt;/span>&lt;span class=p>(&lt;/span>&lt;span class=nx>BlogGenerator&lt;/span>&lt;span class=p>,&lt;/span> &lt;span class=nx>generators&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>Base&lt;/span>&lt;span class=p>);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now do the same in a fashion similar to Backbone.js:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-javascript data-lang=javascript>&lt;span class=kd>var&lt;/span> &lt;span class=nx>BlogGenerator&lt;/span> &lt;span class=o>=&lt;/span> &lt;span class=nx>module&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>exports&lt;/span> &lt;span class=o>=&lt;/span> &lt;span class=nx>generators&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>Base&lt;/span>&lt;span class=p>.&lt;/span>&lt;span class=nx>extend&lt;/span>&lt;span class=p>({&lt;/span>
    &lt;span class=cm>/* prototype methods goes here */&lt;/span>
&lt;span class=p>});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you may know, our next big milestone is to allow generator to be composed with each other. This mean you'll be able to use external generators inside your own, and allow user to build their app using multiple generators (like, I want to build an app with Sailsjs and Angular, with Bootstrap and support for Jenkins tests). Using the &lt;code>.extend&lt;/code> inheritance signature will make it easier to get your generator ready to integrate into the composable yeoman ecosystem.&lt;/p>&lt;p>Note that we extracted the &lt;a href=https://github.com/SBoudrias/class-extend>inheritance logic into a small standalone NPM module&lt;/a>. It'll be easy to add such functionnality into your own projects without any overhead!&lt;/p>&lt;h3>Remove use of deprecated test methods&lt;/h3>&lt;p>In release &lt;code>0.16.0&lt;/code>, we deprecated some tests methods and added some other. Deprecation are now logged to the console, so make sure you get rid of those!&lt;/p>&lt;p>Also, &lt;a href=http://yeoman.io/generator/assert.html>helpers assertions methods&lt;/a> are now exposed on the &lt;code>yeoman.assert&lt;/code> namespace.&lt;/p>&lt;h3>Update dependencies in the generated bower.json and package.json&lt;/h3>&lt;p>As usual, update your deps. You may use &lt;a href=https://github.com/alanshaw/david>david tool&lt;/a> for that.&lt;/p>&lt;h3>Make sure package.json &lt;code>peerDependencies&lt;/code> do not use tilde &lt;code>~&lt;/code> versioning&lt;/h3>&lt;p>NPM &lt;code>peerDependencies&lt;/code> are tricky to get right. As they're installed in the global &lt;code>node_modules&lt;/code> folder, they're often the cause of installation errors due to incompatible version required between differents packages. Please, be a good citizen and don't make the issue worse by using restrictive version requirement.&lt;/p>&lt;p>So, make it a rule to always defines &lt;code>peerDependencies&lt;/code> version using a minimum range (&lt;code>&amp;gt;=&lt;/code>), or using any available version (&lt;code>*&lt;/code>).&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-json data-lang=json>&lt;span class=p>{&lt;/span>
    &lt;span class=nt>"peerDependencies"&lt;/span>&lt;span class=p>:&lt;/span> &lt;span class=p>{&lt;/span>
        &lt;span class=err>//&lt;/span> &lt;span class=err>GOOD&lt;/span>
        &lt;span class=nt>"grunt-cli"&lt;/span>&lt;span class=p>:&lt;/span> &lt;span class=s2>"&amp;gt;= 0.1.0"&lt;/span>&lt;span class=p>,&lt;/span>
        &lt;span class=err>//&lt;/span> &lt;span class=err>GOOD&lt;/span>
        &lt;span class=nt>"gulp"&lt;/span>&lt;span class=p>:&lt;/span> &lt;span class=s2>"*"&lt;/span>&lt;span class=p>,&lt;/span>
        &lt;span class=err>//&lt;/span> &lt;span class=err>BAD&lt;/span> &lt;span class=err>-&lt;/span> &lt;span class=err>don't&lt;/span> &lt;span class=err>ever&lt;/span> &lt;span class=err>do&lt;/span> &lt;span class=err>this&lt;/span>
        &lt;span class=nt>"generator-karma"&lt;/span>&lt;span class=p>:&lt;/span> &lt;span class=s2>"~1.2.0"&lt;/span>&lt;span class=p>,&lt;/span>
        &lt;span class=nt>"generator-commonjs"&lt;/span>&lt;span class=p>:&lt;/span> &lt;span class=s2>"1.2.0"&lt;/span>
    &lt;span class=p>}&lt;/span>
&lt;span class=p>}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3>On that, good luck!&lt;/h3>&lt;p>That's all folks! Good luck and keep on building awesome generators.&lt;/p>&lt;p>If you're a generator author, you really should click the &lt;a href=https://github.com/yeoman/generator>&lt;code>watch&lt;/code> button on the Generator system repo&lt;/a> - this way you'll be kept up to date on our future plan and updates. Also make sure to check the &lt;code>[Composability]&lt;/code> issues, this is our next big milestone and we need your feedback!&lt;/p></content>
  </entry>
  
  <entry>
    <title>Release the Kraken! - Announcing Yeoman 1.0</title>
    <link href="https://yowebapp.github.io/blog/hello-1.0.html"/>
    <updated>2013-08-23T00:00:00+08:00</updated>
    <id>https://yowebapp.github.io/blog/hello-1.0</id>
    <content type="html">&lt;p>Your favorite top-hat-and-mustache man has hit the shelves. Head to your nearest npm today and update to Yeoman 1.0!&lt;/p>&lt;p>&lt;img alt="The Yeoman 1.0 Team" src=http://i.imgur.com/ckKa3jC.jpg>&lt;/p>&lt;p>For those who haven't tried Yeoman yet, or have been waiting for 1.0, just tell your terminal:&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm install -g yo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you've already used any of the 1.0 Release Candidates, you'll feel right at home with this upgrade. You're in for more of the same stable, happy relationships you've had with yo and your favorite generators.&lt;/p>&lt;div class=highlight>&lt;pre>&lt;code class=language-text data-lang=text>npm update -g yo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> Remember, you'll need to install a generator using &lt;code>yo&lt;/code> or &lt;code>yo&lt;/code> followed by a generator name like &lt;code>yo angular&lt;/code> before you see the options below :)&lt;/p>&lt;h2>What's New In 1.0?&lt;/h2>&lt;p>&lt;img alt="A new `yo` helpful prompt system" src=http://i.imgur.com/TY9OpoC.png>&lt;/p>&lt;p>Some of the interesting developments over the past year have included:&lt;/p>&lt;ul>&lt;li>&lt;p>Separating out &lt;code>yo&lt;/code> from &lt;code>yeoman&lt;/code>, positioning it as a first-class scaffolding solution for the web.&lt;/p>&lt;/li>&lt;li>&lt;p>A completely rewritten generator system with rich prompts (checkbox, list, etc. thanks to &lt;a href=https://github.com/SBoudrias/Inquirer.js>Inquirer.js&lt;/a>, file utilities and more.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;a href=https://github.com/yeoman/generator/pull/311>Major performance improvements&lt;/a> and an &lt;a href=https://github.com/yeoman/generator/issues/305>automation of install steps&lt;/a>. Generators can now install all their peer dependencies, meaning you can just run: &lt;code>npm install generator-angular&lt;/code>.&lt;/p>&lt;/li>&lt;li>&lt;p>A new &lt;code>yo&lt;/code> &lt;a href=https://github.com/yeoman/yo/pull/36>helpful prompt system&lt;/a>. Just running &lt;code>yo&lt;/code> without specifying a generator will let you easily update your generators, search for and install new generators, and find help.&lt;/p>&lt;/li>&lt;/ul>&lt;h2>Why Yeoman?&lt;/h2>&lt;p>If you're new to Yeoman, you'll have &lt;em>a lot&lt;/em> of power at your fingertips with just one &lt;code>yo ____&lt;/code> command. For help getting started, try out these resources:&lt;/p>&lt;ul>&lt;li>&lt;p>The Yeoman &lt;a href=http://yeoman.io/learning/index.html>Getting Started Guide&lt;/a> will help understand how to use Yo, Grunt, and Bower together efficiently.&lt;/p>&lt;/li>&lt;li>&lt;p>Addy's &lt;a href="https://www.youtube.com/watch?v=iUQ1fvdO9GY">Video&lt;/a> will walk you through using Yeoman to build an application with AngularJS.&lt;/p>&lt;/li>&lt;li>&lt;p>Stephen's &lt;a href=http://code.tutsplus.com/tutorials/building-apps-with-the-yeoman-workflow--net-33254>Building Apps With The Yeoman Workflow&lt;/a> will show you how to build a Backbone.js application.&lt;/p>&lt;/li>&lt;/ul>&lt;p>Even for experienced developers, Yeoman will still improve your workflow. One of the ways Yeoman helps out of the box is by providing a finely-tuned Grunt configuration. What can take hours to setup-- LiveReload, Sass, Uglify, CoffeeScript-- is done in under a minute. If you wish to customize this even futher, nothing is stopping you!&lt;/p>&lt;h2>Who's Using Yeoman?&lt;/h2>&lt;p>These days, Yeoman powers the tooling behind popular open-source projects like &lt;a href=https://github.com/yeoman/generator-angular>Angular&lt;/a>, can scaffold out &lt;a href=https://github.com/yeoman/generator-jquery>jQuery plugins&lt;/a>, full-stack solutions with &lt;a href=https://github.com/hoodiehq/generator-hoodie>Hood.ie&lt;/a> and &lt;a href=https://github.com/petecoop/generator-express>Express&lt;/a> and is now even used to create complete &lt;a href=https://github.com/wesleytodd/YeoPress>Wordpress&lt;/a> and &lt;a href=https://github.com/robwierzbowski/generator-jekyllrb>Jekyll&lt;/a> sites.&lt;/p>&lt;p>Yeoman can be used for applications of any size-- from &lt;a href=http://gifalicious.net/ >a gif maker&lt;/a> to &lt;a href=https://www.slidecaptain.com/ >a slide deck&lt;/a>, &lt;a href=http://rdbk.net/ >a news site&lt;/a> or even &lt;a href=http://vim.rtorr.com/ >a VIM cheat sheet&lt;/a>.&lt;/p>&lt;p>&lt;em>Have your own? Leave us a message and show it off!&lt;/em>&lt;/p>&lt;h2>What's Next For Yeoman?&lt;/h2>&lt;p>Yeoman will continue to grow. We have big plans that are all based around making your development workflow easier. Addy paints a lovely picture of the future in his video, &lt;a href="https://www.youtube.com/watch?v=MTYZzs8ud3E">The Future Of Yeoman&lt;/a>.&lt;/p>&lt;div class=video-container>&lt;iframe width=640 height=480 src=//www.youtube.com/embed/MTYZzs8ud3E frameborder=0 allowfullscreen>&lt;/iframe>&lt;/div>&lt;p>To recap, here are some of the things you can look forward to:&lt;/p>&lt;ul>&lt;li>&lt;p>Generators extending from other generators.&lt;/p>&lt;/li>&lt;li>&lt;p>Less scaffolding prompts. Your preferences will be remembered.&lt;/p>&lt;/li>&lt;li>&lt;p>Less flags. &lt;code>yo&lt;/code> can be all you need to remember.&lt;/p>&lt;/li>&lt;li>&lt;p>Drop-in features. Need CoffeeScript?&lt;/p>&lt;/li>&lt;/ul>&lt;p>Many more improvements for generator authors also await. You can follow and contribute to the discussion about where we're headed at &lt;a href=https://github.com/yeoman/yo.next>yo.next&lt;/a> on GitHub.&lt;/p>&lt;h2>A Busy Year&lt;/h2>&lt;p>Since this time last year…&lt;/p>&lt;ul>&lt;li>Addy's family moved to London.&lt;/li> &lt;li>Brian moved to California to work on Angular full-time.&lt;/li> &lt;li>Pascal is going to make his big announcement next week or so.&lt;/li> &lt;li>Stephen had a baby lady.&lt;/li> &lt;li>Sindre got a &lt;a href=https://si0.twimg.com/profile_images/378800000290468360/624c082d4ee22bd6806e58dfe7239fa1.jpeg>mustache&lt;/a>.&lt;/li>&lt;/ul>&lt;p>…and yet here we are with the release of a massive project. How could we possibly have done this?&lt;/p>&lt;p>You guys! This simply wouldn't have been possibly without the help of the enormous open source community. If you had a pull request merged, created an issue, or just made a suggestion, leave a comment! This day is all of ours!&lt;/p>&lt;p>Here are some of us...&lt;/p>&lt;p>&lt;img alt="Addy, Brian, and Sindre" src=http://i.imgur.com/MoBqhEQ.png>&lt;/p>&lt;p>...but, thank you from all of us.&lt;/p>&lt;p>Stephen Sawchuk { &lt;a href=https://twitter.com/stephenplusplus>@stephenplusplus&lt;/a> }, &lt;br>Addy Osmani { &lt;a href=https://twitter.com/addyosmani>@addyosmani&lt;/a> }, &lt;br>Sindre Sorhus { &lt;a href=https://twitter.com/sindresorhus>@sindresorhus&lt;/a> }, &lt;br>Brian Ford { &lt;a href=https://twitter.com/briantford>@briantford&lt;/a> }, &lt;br>Pascal Hartig { &lt;a href=https://twitter.com/passy>@passy&lt;/a> }, &lt;br>Paul Irish { &lt;a href=https://twitter.com/paul_irish>@paul_irish&lt;/a> }, &lt;br>Frederick Ros { &lt;a href=https://twitter.com/sl33p3r>@sl33p3r&lt;/a> }, &lt;br>Mickael Daniel { &lt;a href=https://twitter.com/mklabs>@mklabs&lt;/a> }, &lt;br>Eric Bidelman { &lt;a href=https://twitter.com/ebidel>@ebidel&lt;/a> }&lt;/p>&lt;p>and the rest of the &lt;a href=https://github.com/orgs/yeoman/people>Yeoman&lt;/a> team.&lt;/p></content>
  </entry>
  
</feed>